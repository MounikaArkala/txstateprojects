
still on lecture-5
m values, p processors
assign m/p values to each processor.
this is a MIMD algorithm (pace of execution of code is different even though
code is same, so it's not suitable for processor arrays.)

comparison of execution times between two summation algorithms

Transmission delay - data -> cable
propagation delay - data -> links -> other end

switch hardware doesn't support broadcasting - how do you send to a group of processors?
 - hypercube broadcast algorithm ( based on binomial tree communication pattern.)
 
 diagram of broadcast algorithm - it's better to send A by itself, rather than ABC, so that that one can
 immediately start forwarding A on.  the values propagate faster.  It assumes that each processor
 can do multiple sends at once, though
 so it's inaccurate in that regard.

prefix sums on multicomputers
each processor does local sums, then prefix sum of subsequences are calculated.

beta is the transmission time

every processor has a value, they must cooperate.

if a is 2^k, after k swap add iterations, each process pi will have a value in the 2nd (lower variable)
is the sum of all values in all processors with index lower than i.
which is needed by that pi to compute prefix sum, which will be part of the whole prefix sum.



homework 1:
problem 1
a.
 - description of time complexity of problem n
 problem of size n, it will take 2lgn time to get a problem half the original size.
 it will take 2lg(n/2) and you're left with a problem of size n/4.
-you'll end up with lgn of these 2lg(n) terms.

assume n = 2^k.
we end up with T(1) + 2lg(n/2^(k-1)) + .... + 2lg(n)
T(1) is a constant.   |_____________lgn terms______|

use property of logs, lg(n/2^i) = lgn = lg(2^i)
so it decomposes into
2(lgn + lgn + lgn + lgn (lgn of them) - ((k-1) + (k-2) + (k-3) + .... + 1))
2 (lg^2n -  k(k-1) / 2)
= 2(lg^2n - lg^2n/2 + lg^2n/2)
=
2 lg^2n + lgn
= lg^2n

b.
n = 4^k
4^2T(n/4^2) + 4C + C
              |_k__|
=4^k T(1) + C(1 + 4 + ... + 4^k-1)
= Cn + C(1 + 4 + .. + 4^k-1)
what is k+1? geometric sequence you can solve easily.
solves to n.
Cn + Cn = linear.
Ratio of ai / ai-1 = q for all i's

ai (q^n-1 / q-1) (1 * 4^k-1 / 4-1)

c.
for problem set n, you will take n, and 2/3 of problem of size n/2.
gut feeling -> n?
can we prove/disprove this?
2/3( 2/3 T(n/2^2) + n/2) + n
= (2/3)^2 T(n/2^2) + n/3 + n
= (2/3)^3 T(n/2^3) + n/3^2 + n/3 + n

so if n = 2^k
and k = lgn
then
= (2/3)^kT(1) + n(1 + 1/3 + .... + 1/3^k-1)
regardless of # of terms (since finite) this summation will approach 2 but will be less than 2.
(2/3) ^lgn + C + n * C'
however, 2/3 is less than 1, so you can drop it.  C' is constant, drop it.
SO there's 'n' left.

need hands-on experience to do induction.

we'll do fourier and matrix stuff next time.  
