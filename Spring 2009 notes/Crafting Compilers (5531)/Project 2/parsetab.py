
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xdd\xdbq\xfc\xb3\x96`\xa0\xe5F\xdae%\xab\x1a\xed'
    
_lr_action_items = {'RETURN':([13,25,26,30,31,33,37,42,47,49,50,53,55,56,59,61,73,81,88,98,100,101,105,106,108,],[-7,-6,-63,35,-63,-19,-26,35,35,-27,-23,35,-25,-24,-20,-34,-32,-30,-35,-28,35,-29,35,-33,-31,]),'LTE':([36,39,40,43,44,45,52,54,57,58,62,63,74,89,90,91,94,95,96,97,99,102,103,],[-59,-56,-38,-50,-55,-36,-46,-58,-57,85,-55,85,85,85,-47,85,85,-54,85,-51,-39,-37,-60,]),'LESS':([36,39,40,43,44,45,52,54,57,58,62,63,74,89,90,91,94,95,96,97,99,102,103,],[-59,-56,-38,-50,-55,-36,-46,-58,-57,82,-55,82,82,82,-47,82,82,-54,82,-51,-39,-37,-60,]),'VOID':([0,1,6,8,13,15,23,25,26,27,31,68,],[7,7,-5,-4,-7,7,7,-6,7,-12,7,-18,]),'LBRACKET':([12,24,45,60,],[14,29,71,14,]),'WHILE':([13,25,26,30,31,33,37,42,47,49,50,53,55,56,59,61,73,81,88,98,100,101,105,106,108,],[-7,-6,-63,38,-63,-19,-26,38,38,-27,-23,38,-25,-24,-20,-34,-32,-30,-35,-28,38,-29,38,-33,-31,]),'GREATER':([36,39,40,43,44,45,52,54,57,58,62,63,74,89,90,91,94,95,96,97,99,102,103,],[-59,-56,-38,-50,-55,-36,-46,-58,-57,87,-55,87,87,87,-47,87,87,-54,87,-51,-39,-37,-60,]),'MULTIPLY':([36,39,43,44,45,52,54,57,62,90,95,97,102,103,],[-59,-56,-50,-55,-36,76,-58,-57,-55,76,-54,-51,-37,-60,]),'MINUS':([36,39,40,43,44,45,52,54,57,62,90,92,95,97,99,102,103,],[-59,-56,67,-50,-55,-36,-46,-58,-57,-55,-47,67,-54,-51,67,-37,-60,]),'STRING':([0,1,6,8,13,15,23,25,26,27,31,68,],[4,4,-5,-4,-7,4,4,-6,4,-12,4,-18,]),'RPAREN':([15,17,18,20,23,24,28,34,36,39,40,43,45,52,54,57,62,74,89,90,93,94,95,96,97,99,102,103,107,],[-63,22,-14,-13,-63,-16,-15,-17,-59,-56,-38,-50,-36,-46,-58,-57,-55,95,100,-47,103,-61,-54,105,-51,-39,-37,-60,-62,]),'SEMICOLON':([12,21,35,36,39,40,43,44,45,52,54,57,58,60,62,63,90,91,95,97,99,102,103,],[13,25,61,-59,-56,-38,-50,-55,-36,-46,-58,-57,81,13,-55,88,-47,101,-54,-51,-39,-37,-60,]),'COMMA':([18,24,34,36,39,40,43,45,52,54,57,62,90,94,95,97,99,102,103,],[23,-16,-17,-59,-56,-38,-50,-36,-46,-58,-57,-55,-47,104,-54,-51,-39,-37,-60,]),'GTE':([36,39,40,43,44,45,52,54,57,58,62,63,74,89,90,91,94,95,96,97,99,102,103,],[-59,-56,-38,-50,-55,-36,-46,-58,-57,84,-55,84,84,84,-47,84,84,-54,84,-51,-39,-37,-60,]),'PLUS':([36,39,40,43,44,45,52,54,57,62,90,92,95,97,99,102,103,],[-59,-56,66,-50,-55,-36,-46,-58,-57,-55,-47,66,-54,-51,66,-37,-60,]),'IDENTIFIER':([2,4,5,7,10,13,19,25,26,30,31,32,33,35,37,42,47,48,49,50,53,55,56,59,61,64,65,66,67,70,71,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,98,100,101,104,105,106,108,],[-9,-11,-8,-10,12,-7,24,-6,-63,45,-63,60,-19,45,-26,45,45,45,-27,-23,45,-25,-24,-20,-34,45,45,-48,-49,45,45,45,-32,45,-52,-53,45,45,-30,-41,-42,-44,-40,-45,-43,-35,-28,45,-29,45,45,-33,-31,]),'ASSIGN':([44,45,102,],[70,-36,-37,]),'$end':([1,3,6,8,9,11,13,25,27,68,],[-2,-1,-5,-4,0,-3,-7,-6,-12,-18,]),'DIVIDE':([36,39,43,44,45,52,54,57,62,90,95,97,102,103,],[-59,-56,-50,-55,-36,77,-58,-57,-55,77,-54,-51,-37,-60,]),'RBRACE':([13,25,26,30,31,33,37,41,42,46,49,50,53,55,56,59,61,69,73,79,81,88,98,101,106,108,],[-7,-6,-63,-63,-63,-19,-26,68,-63,-21,-27,-23,-63,-25,-24,-20,-34,-22,-32,98,-30,-35,-28,-29,-33,-31,]),'ELSE':([13,25,26,30,31,33,37,42,47,49,50,53,55,56,59,61,73,81,88,98,100,101,105,106,108,],[-7,-6,-63,47,-63,-19,-26,47,47,-27,-23,47,-25,-24,-20,-34,-32,-30,-35,-28,47,-29,47,-33,-31,]),'LPAREN':([12,13,25,26,30,31,33,35,37,38,42,45,47,48,49,50,51,53,55,56,59,61,64,65,66,67,70,71,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,98,100,101,104,105,106,108,],[15,-7,-6,-63,48,-63,-19,48,-26,64,48,72,48,48,-27,-23,75,48,-25,-24,-20,-34,48,48,-48,-49,48,48,48,-32,48,-52,-53,48,48,-30,-41,-42,-44,-40,-45,-43,-35,-28,48,-29,48,48,-33,-31,]),'EQ':([36,39,40,43,44,45,52,54,57,58,62,63,74,89,90,91,94,95,96,97,99,102,103,],[-59,-56,-38,-50,-55,-36,-46,-58,-57,83,-55,83,83,83,-47,83,83,-54,83,-51,-39,-37,-60,]),'IF':([13,25,26,30,31,33,37,42,47,49,50,53,55,56,59,61,73,81,88,98,100,101,105,106,108,],[-7,-6,-63,51,-63,-19,-26,51,51,-27,-23,51,-25,-24,-20,-34,-32,-30,-35,-28,51,-29,51,-33,-31,]),'NEQ':([36,39,40,43,44,45,52,54,57,58,62,63,74,89,90,91,94,95,96,97,99,102,103,],[-59,-56,-38,-50,-55,-36,-46,-58,-57,86,-55,86,86,86,-47,86,86,-54,86,-51,-39,-37,-60,]),'CHAR':([0,1,6,8,13,15,23,25,26,27,31,68,],[2,2,-5,-4,-7,2,2,-6,2,-12,2,-18,]),'LBRACE':([13,22,25,26,30,31,33,37,42,47,49,50,53,55,56,59,61,73,81,88,98,100,101,105,106,108,],[-7,26,-6,-63,53,-63,-19,-26,53,53,-27,-23,53,-25,-24,-20,-34,-32,-30,-35,-28,53,-29,53,-33,-31,]),'STRING_LITERAL':([13,25,26,30,31,33,35,37,42,47,48,49,50,53,55,56,59,61,64,65,66,67,70,71,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,98,100,101,104,105,106,108,],[-7,-6,-63,36,-63,-19,36,-26,36,36,36,-27,-23,36,-25,-24,-20,-34,36,36,-48,-49,36,36,36,-32,36,-52,-53,36,36,-30,-41,-42,-44,-40,-45,-43,-35,-28,36,-29,36,36,-33,-31,]),'INT':([0,1,6,8,13,15,23,25,26,27,31,68,],[5,5,-5,-4,-7,5,5,-6,5,-12,5,-18,]),'CHAR_LITERAL':([13,25,26,30,31,33,35,37,42,47,48,49,50,53,55,56,59,61,64,65,66,67,70,71,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,98,100,101,104,105,106,108,],[-7,-6,-63,54,-63,-19,54,-26,54,54,54,-27,-23,54,-25,-24,-20,-34,54,54,-48,-49,54,54,54,-32,54,-52,-53,54,54,-30,-41,-42,-44,-40,-45,-43,-35,-28,54,-29,54,54,-33,-31,]),'INT_LITERAL':([13,14,25,26,30,31,33,35,37,42,47,48,49,50,53,55,56,59,61,64,65,66,67,70,71,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,98,100,101,104,105,106,108,],[-7,16,-6,-63,57,-63,-19,57,-26,57,57,57,-27,-23,57,-25,-24,-20,-34,57,57,-48,-49,57,57,57,-32,57,-52,-53,57,57,-30,-41,-42,-44,-40,-45,-43,-35,-28,57,-29,57,57,-33,-31,]),'RBRACKET':([16,29,36,39,43,45,52,54,57,62,90,92,95,97,102,103,],[21,34,-59,-56,-50,-36,-46,-58,-57,-55,-47,102,-54,-51,-37,-60,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decl':([0,1,],[1,1,]),'funDecl':([0,1,],[6,6,]),'loopStmt':([30,42,47,53,100,105,],[37,37,37,37,37,37,]),'condStmt':([30,42,47,53,100,105,],[55,55,55,55,55,55,]),'funcCallExpr':([30,35,42,47,48,53,64,65,70,71,72,75,78,80,100,104,105,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'addExpr':([30,35,42,47,48,53,64,70,71,72,75,80,100,104,105,],[40,40,40,40,40,40,40,40,92,40,40,99,40,40,40,]),'declList':([0,1,],[3,11,]),'statementList':([30,42,53,],[41,69,79,]),'program':([0,],[9,]),'statement':([30,42,47,53,100,105,],[42,42,73,42,106,108,]),'factor':([30,35,42,47,48,53,64,65,70,71,72,75,78,80,100,104,105,],[43,43,43,43,43,43,43,43,43,43,43,43,97,43,43,43,43,]),'var':([30,35,42,47,48,53,64,65,70,71,72,75,78,80,100,104,105,],[44,62,44,44,62,44,62,62,62,62,62,62,62,62,44,62,44,]),'argList':([72,104,],[93,107,]),'empty':([15,23,26,30,31,42,53,],[20,20,33,46,33,46,46,]),'addop':([40,92,99,],[65,65,65,]),'localDeclList':([26,31,],[30,59,]),'varDecl':([0,1,26,31,],[8,8,31,31,]),'formalDecl':([15,23,],[18,18,]),'returnStmt':([30,42,47,53,100,105,],[49,49,49,49,49,49,]),'compoundStmt':([30,42,47,53,100,105,],[50,50,50,50,50,50,]),'term':([30,35,42,47,48,53,64,65,70,71,72,75,80,100,104,105,],[52,52,52,52,52,52,52,90,52,52,52,52,52,52,52,52,]),'relop':([58,63,74,89,91,94,96,],[80,80,80,80,80,80,80,]),'formalDeclList':([15,23,],[17,28,]),'funBody':([22,],[27,]),'assignStmt':([30,42,47,53,100,105,],[56,56,56,56,56,56,]),'mulop':([52,90,],[78,78,]),'expression':([30,35,42,47,48,53,64,70,72,75,100,104,105,],[58,63,58,58,74,58,89,91,94,96,58,94,58,]),'typeSpecifier':([0,1,15,23,26,31,],[10,10,19,19,32,32,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declList','program',1,'p_start','mcc.py',239),
  ('declList -> decl','declList',1,'p_declList','mcc.py',243),
  ('declList -> decl declList','declList',2,'p_declList','mcc.py',244),
  ('decl -> varDecl','decl',1,'p_decl','mcc.py',249),
  ('decl -> funDecl','decl',1,'p_decl','mcc.py',250),
  ('varDecl -> typeSpecifier IDENTIFIER LBRACKET INT_LITERAL RBRACKET SEMICOLON','varDecl',6,'p_varDecl','mcc.py',278),
  ('varDecl -> typeSpecifier IDENTIFIER SEMICOLON','varDecl',3,'p_varDecl','mcc.py',279),
  ('typeSpecifier -> INT','typeSpecifier',1,'p_typeSpecifier','mcc.py',284),
  ('typeSpecifier -> CHAR','typeSpecifier',1,'p_typeSpecifier','mcc.py',285),
  ('typeSpecifier -> VOID','typeSpecifier',1,'p_typeSpecifier','mcc.py',286),
  ('typeSpecifier -> STRING','typeSpecifier',1,'p_typeSpecifier','mcc.py',287),
  ('funDecl -> typeSpecifier IDENTIFIER LPAREN formalDeclList RPAREN funBody','funDecl',6,'p_funDecl','mcc.py',293),
  ('formalDeclList -> empty','formalDeclList',1,'p_formalDeclList','mcc.py',301),
  ('formalDeclList -> formalDecl','formalDeclList',1,'p_formalDeclList','mcc.py',302),
  ('formalDeclList -> formalDecl COMMA formalDeclList','formalDeclList',3,'p_formalDeclList','mcc.py',303),
  ('formalDecl -> typeSpecifier IDENTIFIER','formalDecl',2,'p_formalDecl','mcc.py',307),
  ('formalDecl -> typeSpecifier IDENTIFIER LBRACKET RBRACKET','formalDecl',4,'p_formalDecl','mcc.py',308),
  ('funBody -> LBRACE localDeclList statementList RBRACE','funBody',4,'p_funBody','mcc.py',348),
  ('localDeclList -> empty','localDeclList',1,'p_localDeclList','mcc.py',353),
  ('localDeclList -> varDecl localDeclList','localDeclList',2,'p_localDeclList','mcc.py',354),
  ('statementList -> empty','statementList',1,'p_statementList','mcc.py',381),
  ('statementList -> statement statementList','statementList',2,'p_statementList','mcc.py',382),
  ('statement -> compoundStmt','statement',1,'p_statement','mcc.py',386),
  ('statement -> assignStmt','statement',1,'p_statement','mcc.py',387),
  ('statement -> condStmt','statement',1,'p_statement','mcc.py',388),
  ('statement -> loopStmt','statement',1,'p_statement','mcc.py',389),
  ('statement -> returnStmt','statement',1,'p_statement','mcc.py',390),
  ('compoundStmt -> LBRACE statementList RBRACE','compoundStmt',3,'p_compoundStmt','mcc.py',394),
  ('assignStmt -> var ASSIGN expression SEMICOLON','assignStmt',4,'p_assignStmt','mcc.py',398),
  ('assignStmt -> expression SEMICOLON','assignStmt',2,'p_assignStmt','mcc.py',399),
  ('condStmt -> IF LPAREN expression RPAREN statement','condStmt',5,'p_condStmt','mcc.py',403),
  ('condStmt -> ELSE statement','condStmt',2,'p_condStmt','mcc.py',404),
  ('loopStmt -> WHILE LPAREN expression RPAREN statement','loopStmt',5,'p_loopStmt','mcc.py',408),
  ('returnStmt -> RETURN SEMICOLON','returnStmt',2,'p_returnStmt','mcc.py',414),
  ('returnStmt -> RETURN expression SEMICOLON','returnStmt',3,'p_returnStmt','mcc.py',415),
  ('var -> IDENTIFIER','var',1,'p_var','mcc.py',420),
  ('var -> IDENTIFIER LBRACKET addExpr RBRACKET','var',4,'p_var','mcc.py',421),
  ('expression -> addExpr','expression',1,'p_expression','mcc.py',436),
  ('expression -> expression relop addExpr','expression',3,'p_expression','mcc.py',437),
  ('relop -> LTE','relop',1,'p_relop','mcc.py',441),
  ('relop -> LESS','relop',1,'p_relop','mcc.py',442),
  ('relop -> EQ','relop',1,'p_relop','mcc.py',443),
  ('relop -> GREATER','relop',1,'p_relop','mcc.py',444),
  ('relop -> GTE','relop',1,'p_relop','mcc.py',445),
  ('relop -> NEQ','relop',1,'p_relop','mcc.py',446),
  ('addExpr -> term','addExpr',1,'p_addExpr','mcc.py',450),
  ('addExpr -> addExpr addop term','addExpr',3,'p_addExpr','mcc.py',451),
  ('addop -> PLUS','addop',1,'p_addop','mcc.py',455),
  ('addop -> MINUS','addop',1,'p_addop','mcc.py',456),
  ('term -> factor','term',1,'p_term','mcc.py',460),
  ('term -> term mulop factor','term',3,'p_term','mcc.py',461),
  ('mulop -> MULTIPLY','mulop',1,'p_mulop','mcc.py',466),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','mcc.py',467),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','mcc.py',471),
  ('factor -> var','factor',1,'p_factor','mcc.py',472),
  ('factor -> funcCallExpr','factor',1,'p_factor','mcc.py',473),
  ('factor -> INT_LITERAL','factor',1,'p_factor','mcc.py',474),
  ('factor -> CHAR_LITERAL','factor',1,'p_factor','mcc.py',475),
  ('factor -> STRING_LITERAL','factor',1,'p_factor','mcc.py',476),
  ('funcCallExpr -> IDENTIFIER LPAREN argList RPAREN','funcCallExpr',4,'p_funcCallExpr','mcc.py',481),
  ('argList -> expression','argList',1,'p_argList','mcc.py',485),
  ('argList -> expression COMMA argList','argList',3,'p_argList','mcc.py',486),
  ('empty -> <empty>','empty',0,'p_empty','mcc.py',515),
]
