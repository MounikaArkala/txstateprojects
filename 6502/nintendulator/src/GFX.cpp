/* Nintendulator - Win32 NES emulator written in C++
 * Copyright (C) 2002-2009 QMT Productions
 *
 * $URL: https://nintendulator.svn.sourceforge.net/svnroot/nintendulator/nintendulator/trunk/src/GFX.cpp $
 * $Id: GFX.cpp 998 2009-05-25 00:44:09Z Quietust $
 */

#include "stdafx.h"
#include "Nintendulator.h"
#include "resource.h"
#include "MapperInterface.h"
#include "Controllers.h"
#include "NES.h"
#include "GFX.h"
#include "PPU.h"
#include "AVI.h"
#include <commctrl.h>

#define	_USE_MATH_DEFINES
#include <math.h>

#ifndef M_PI
#define M_PI	3.14159265358979323846
#endif	/* !M_PI */

namespace GFX
{
	unsigned char RawPalette[8][64][3];
	unsigned short Palette15[512];
	unsigned short Palette16[512];
	unsigned long Palette32[512];
	char Depth;
	BOOL Fullscreen, Scanlines;

	LARGE_INTEGER ClockFreq;
	LARGE_INTEGER LastClockVal;
	int FPSnum, FPSCnt, FSkip;
	BOOL aFSkip;

	int Pitch;
	int WantFPS;
	int aFPScnt, aFPSnum;

	BOOL SlowDown;
	int SlowRate;

	int PaletteNTSC, PalettePAL;
	int NTSChue, NTSCsat, PALsat;
	TCHAR CustPaletteNTSC[MAX_PATH], CustPalettePAL[MAX_PATH];

	LPDIRECTDRAW7		DirectDraw;
	LPDIRECTDRAWSURFACE7	PrimarySurf, SecondarySurf;
	LPDIRECTDRAWCLIPPER	Clipper;
	DDSURFACEDESC2		SurfDesc;
	DWORD			SurfSize;

#define	Try(action,errormsg) do {\
	if (FAILED(action))\
	{\
		Release();\
		MessageBox(hMainWnd, errormsg _T(", retrying"), _T("Nintendulator"), MB_OK | MB_ICONWARNING);\
		Fullscreen = FALSE;\
		Create();\
		PPU::GetGFXPtr();\
		if (FAILED(action))\
		{\
			MessageBox(hMainWnd, _T("Error: ") errormsg, _T("Nintendulator"), MB_OK | MB_ICONERROR);\
			return;\
		}\
	}\
} while (false)

void	Init (void)
{
	ZeroMemory(&SurfDesc, sizeof(SurfDesc));
	ZeroMemory(Palette15, sizeof(Palette15));
	ZeroMemory(Palette16, sizeof(Palette16));
	ZeroMemory(Palette32, sizeof(Palette32));
	DirectDraw = NULL;
	PrimarySurf = NULL;
	SecondarySurf = NULL;
	Clipper = NULL;
	Pitch = 0;
	WantFPS = 0;
	FPSCnt = 0;
	FPSnum = 0;
	aFPScnt = 0;
	aFPSnum = 0;
	FSkip = 0;
	aFSkip = TRUE;
	Depth = 0;
	ClockFreq.QuadPart = 0;
	LastClockVal.QuadPart = 0;
	PaletteNTSC = 0;
	PalettePAL = 1;
	NTSChue = 0;
	NTSCsat = 50;
	PALsat = 50;
	Fullscreen = FALSE;
}

void	Create (void)
{
	if (!QueryPerformanceFrequency(&ClockFreq))
	{
		MessageBox(hMainWnd, _T("Failed to determine performance counter frequency!"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
		return;
	}

	if (FAILED(DirectDrawCreateEx(NULL, (LPVOID *)&DirectDraw, IID_IDirectDraw7, NULL)))
	{
		Release();
		MessageBox(hMainWnd, _T("Failed to initialize DirectDraw 7"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
		return;
	}

	if (Fullscreen)
	{
		if (dbgVisible)
			ShowWindow(hDebug, SW_MINIMIZE);
		SetWindowLongPtr(hMainWnd, GWL_STYLE, WS_POPUP);
		SetMenu(hMainWnd, NULL);
		ShowWindow(hMainWnd, SW_MAXIMIZE);
		if (FAILED(DirectDraw->SetCooperativeLevel( hMainWnd, DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN | DDSCL_NOWINDOWCHANGES)))
		{
			Release();
			MessageBox(hMainWnd, _T("Failed to set cooperative level!"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
			return;
		}
		if (FAILED(DirectDraw->SetDisplayMode(640, 480, 32, 0, 0)))
		{
			Release();
			MessageBox(hMainWnd, _T("Failed to set display mode!"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
			return;
		}
	}
	else
	{
		if (FAILED(DirectDraw->SetCooperativeLevel(hMainWnd, DDSCL_NORMAL)))
		{
			Release();
			MessageBox(hMainWnd, _T("Failed to set DirectDraw cooperative level"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
			return;
		}
	}

	ZeroMemory(&SurfDesc, sizeof(SurfDesc));
	SurfDesc.dwSize = sizeof(SurfDesc);

	if (Fullscreen)
	{
		SurfDesc.dwFlags = DDSD_CAPS | DDSD_BACKBUFFERCOUNT;
		SurfDesc.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE | DDSCAPS_FLIP | DDSCAPS_COMPLEX;
		SurfDesc.dwBackBufferCount = 1;

		if (FAILED(DirectDraw->CreateSurface(&SurfDesc, &PrimarySurf, NULL)))
		{
			Release();
			MessageBox(hMainWnd, _T("Failed to create primary surface"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
			return;
		}

		SurfDesc.ddsCaps.dwCaps = DDSCAPS_BACKBUFFER;
		if (FAILED(PrimarySurf->GetAttachedSurface(&SurfDesc.ddsCaps, &SecondarySurf)))
		{
			Release();
			MessageBox(hMainWnd, _T("Failed to get secondary surface"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
			return;
		}
	}
	else
	{
		SurfDesc.dwFlags = DDSD_CAPS;
		SurfDesc.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE;

		if (FAILED(DirectDraw->CreateSurface(&SurfDesc, &PrimarySurf, NULL)))
		{
			Release();
			MessageBox(hMainWnd, _T("Failed to create primary surface"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
			return;
		}

		if (Scanlines)
		{
			SurfDesc.dwWidth = 512;
			SurfDesc.dwHeight = 480;
		}
		else
		{
			SurfDesc.dwWidth = 256;
			SurfDesc.dwHeight = 240;
		}
		SurfDesc.dwFlags = DDSD_WIDTH | DDSD_HEIGHT | DDSD_CAPS;
		SurfDesc.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN;

		if (FAILED(DirectDraw->CreateSurface(&SurfDesc, &SecondarySurf, NULL)))
		{
			Release();
			MessageBox(hMainWnd, _T("Failed to create secondary surface"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
			return;
		}
	}

	if (!Fullscreen)
	{
		if (FAILED(DirectDraw->CreateClipper(0, &Clipper, NULL)))
		{
			Release();
			MessageBox(hMainWnd, _T("Failed to create clipper"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
			return;
		}

		if (FAILED(Clipper->SetHWnd(0, hMainWnd)))
		{
			Release();
			MessageBox(hMainWnd, _T("Failed to set clipper window"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
			return;
		}

		if (FAILED(PrimarySurf->SetClipper(Clipper)))
		{
			Release();
			MessageBox(hMainWnd, _T("Failed to assign clipper to primary surface"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
			return;
		}
	}

	ZeroMemory(&SurfDesc, sizeof(SurfDesc));
	SurfDesc.dwSize = sizeof(SurfDesc);

	if (FAILED(SecondarySurf->GetSurfaceDesc(&SurfDesc)))
	{
		Release();
		MessageBox(hMainWnd, _T("Failed to retrieve surface description"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
		return;
	}

	Pitch = SurfDesc.lPitch;
	FPSCnt = FSkip;

	switch (SurfDesc.ddpfPixelFormat.dwRGBBitCount)
	{
	case 16:if (SurfDesc.ddpfPixelFormat.dwRBitMask == 0xF800)
			Depth = 16;
		else	Depth = 15;	break;
	case 32:Depth = 32;		break;
	default:
		Release();
		MessageBox(hMainWnd, _T("Invalid bit depth detected!"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
		return;			break;
	}

	// this will automatically call Update()
	LoadPalette(PPU::IsPAL ? PalettePAL : PaletteNTSC);
	EI.DbgOut(_T("Created %ix%i %i-bit display surface (%s)"), SurfDesc.dwWidth, SurfDesc.dwHeight, Depth, Fullscreen ? _T("fullscreen") : _T("windowed"));
}

void	Release (void)
{
	if (Clipper)
	{
		Clipper->Release();
		Clipper = NULL;
	}
	if (SecondarySurf)
	{
		SecondarySurf->Release();
		SecondarySurf = NULL;
	}
	if (PrimarySurf)
	{
		PrimarySurf->Release();
		PrimarySurf = NULL;
	}
	if (DirectDraw)
	{
		DirectDraw->Release();
		DirectDraw = NULL;
	}
	if (Fullscreen)
	{
		SetWindowLongPtr(hMainWnd, GWL_STYLE, WS_OVERLAPPEDWINDOW);
		SetMenu(hMainWnd, hMenu);
		ShowWindow(hMainWnd, SW_RESTORE);
		if (dbgVisible)
			ShowWindow(hDebug, SW_RESTORE);
		NES::UpdateInterface();
	}
}

void	DrawScreen (void)
{
	LARGE_INTEGER TmpClockVal;
	static int TitleDelay = 0;
	if (AVI::handle)
		AVI::AddVideo();
	if (SlowDown)
		Sleep(SlowRate * 1000 / WantFPS);
	if (++FPSCnt > FSkip)
	{
		Update();
		FPSCnt = 0;
	}
	QueryPerformanceCounter(&TmpClockVal);
	aFPSnum += (int)(TmpClockVal.QuadPart - LastClockVal.QuadPart);
	LastClockVal = TmpClockVal;
	if (++aFPScnt >= 20)
	{
		FPSnum = (int)((ClockFreq.QuadPart * aFPScnt) / aFPSnum);
		if (aFSkip)
		{
			if ((FSkip < 9) && (FPSnum <= (WantFPS * 9 / 10)))
				FSkip++;
			if ((FSkip > 0) && (FPSnum >= (WantFPS - 1)))
				FSkip--;
			SetFrameskip(-1);
		}
		aFPScnt = 0;
		aFPSnum = 0;
	}
	if (!TitleDelay--)
	{
		UpdateTitlebar();
		TitleDelay = 10;
	}
}

void	SetFrameskip (int skip)
{
	if (skip >= 0)
		FSkip = skip;

	if ((skip == -2) ||
		(Controllers::Port1->Type == Controllers::STD_ZAPPER) || (Controllers::Port1->Type == Controllers::STD_VSZAPPER) ||
		(Controllers::Port2->Type == Controllers::STD_ZAPPER) || (Controllers::Port2->Type == Controllers::STD_VSZAPPER))
	{	// if Zapper, force it to zero frameskip, otherwise it won't work
		FSkip = 0;
		aFSkip = 0;
	}

	if (aFSkip)
		CheckMenuItem(hMenu, ID_PPU_FRAMESKIP_AUTO, MF_CHECKED);
	else	CheckMenuItem(hMenu, ID_PPU_FRAMESKIP_AUTO, MF_UNCHECKED);
	switch (FSkip)
	{
	case 0:	CheckMenuRadioItem(hMenu, ID_PPU_FRAMESKIP_0, ID_PPU_FRAMESKIP_9, ID_PPU_FRAMESKIP_0, MF_BYCOMMAND);	break;
	case 1:	CheckMenuRadioItem(hMenu, ID_PPU_FRAMESKIP_0, ID_PPU_FRAMESKIP_9, ID_PPU_FRAMESKIP_1, MF_BYCOMMAND);	break;
	case 2:	CheckMenuRadioItem(hMenu, ID_PPU_FRAMESKIP_0, ID_PPU_FRAMESKIP_9, ID_PPU_FRAMESKIP_2, MF_BYCOMMAND);	break;
	case 3:	CheckMenuRadioItem(hMenu, ID_PPU_FRAMESKIP_0, ID_PPU_FRAMESKIP_9, ID_PPU_FRAMESKIP_3, MF_BYCOMMAND);	break;
	case 4:	CheckMenuRadioItem(hMenu, ID_PPU_FRAMESKIP_0, ID_PPU_FRAMESKIP_9, ID_PPU_FRAMESKIP_4, MF_BYCOMMAND);	break;
	case 5:	CheckMenuRadioItem(hMenu, ID_PPU_FRAMESKIP_0, ID_PPU_FRAMESKIP_9, ID_PPU_FRAMESKIP_5, MF_BYCOMMAND);	break;
	case 6:	CheckMenuRadioItem(hMenu, ID_PPU_FRAMESKIP_0, ID_PPU_FRAMESKIP_9, ID_PPU_FRAMESKIP_6, MF_BYCOMMAND);	break;
	case 7:	CheckMenuRadioItem(hMenu, ID_PPU_FRAMESKIP_0, ID_PPU_FRAMESKIP_9, ID_PPU_FRAMESKIP_7, MF_BYCOMMAND);	break;
	case 8:	CheckMenuRadioItem(hMenu, ID_PPU_FRAMESKIP_0, ID_PPU_FRAMESKIP_9, ID_PPU_FRAMESKIP_8, MF_BYCOMMAND);	break;
	case 9:	CheckMenuRadioItem(hMenu, ID_PPU_FRAMESKIP_0, ID_PPU_FRAMESKIP_9, ID_PPU_FRAMESKIP_9, MF_BYCOMMAND);	break;
	}
}

void	Draw2x (void)
{
	register unsigned short *src = PPU::DrawArray;
	if (Depth == 32)
	{
		int x, y;
		for (y = 0; y < 480; y++)
		{
			register unsigned long *dst = (unsigned long *)((unsigned char *)SurfDesc.lpSurface + y*Pitch);
			if (Fullscreen)
			{
				for (x = 0; x < 64; x++)
					*dst++ = 0;
			}
			if (Scanlines && (y & 1))
			{
				for (x = 0; x < 256; x++)
				{
					*dst++ = 0;
					*dst++ = 0;
				}
				src += 256;
			}
			else
			{
				for (x = 0; x < 256; x++)
				{
					*dst++ = Palette32[*src];
					*dst++ = Palette32[*src];
					src++;
				}
			}
			if (Fullscreen)
			{
				for (x = 0; x < 64; x++)
					*dst++ = 0;
			}
			if (!(y & 1))
				src -= 256;
		}
	}
	else if (Depth == 16)
	{
		int x, y;
		for (y = 0; y < 480; y++)
		{
			register unsigned short *dst = (unsigned short *)((unsigned char *)SurfDesc.lpSurface + y*Pitch);
			if (Fullscreen)
			{
				for (x = 0; x < 64; x++)
					*dst++ = 0;
			}
			if (Scanlines && (y & 1))
			{
				for (x = 0; x < 256; x++)
				{
					*dst++ = 0;
					*dst++ = 0;
				}
				src += 256;
			}
			else
			{
				for (x = 0; x < 256; x++)
				{
					*dst++ = Palette16[*src];
					*dst++ = Palette16[*src];
					src++;
				}
			}
			if (Fullscreen)
			{
				for (x = 0; x < 64; x++)
					*dst++ = 0;
			}
			if (!(y & 1))
				src -= 256;
		}
	}
	else
	{
		int x, y;
		for (y = 0; y < 240; y++)
		{
			register unsigned short *dst = (unsigned short *)((unsigned char *)SurfDesc.lpSurface + y*Pitch);
			if (Fullscreen)
			{
				for (x = 0; x < 64; x++)
					*dst++ = 0;
			}
			if (Scanlines && (y & 1))
			{
				for (x = 0; x < 256; x++)
				{
					*dst++ = 0;
					*dst++ = 0;
				}
				src += 256;
			}
			else
			{
				for (x = 0; x < 256; x++)
				{
					*dst++ = Palette15[*src];
					*dst++ = Palette15[*src];
					src++;
				}
			}
			if (Fullscreen)
			{
				for (x = 0; x < 64; x++)
					*dst++ = 0;
			}
			if (!(y & 1))
				src -= 256;
		}
	}
}

void	Draw1x (void)
{
	register unsigned short *src = PPU::DrawArray;
	if (Depth == 32)
	{
		int x, y;
		for (y = 0; y < 240; y++)
		{
			register unsigned long *dst = (unsigned long *)((unsigned char *)SurfDesc.lpSurface + y*Pitch);
			for (x = 0; x < 256; x++)
				*dst++ = Palette32[*src++];
		}
	}
	else if (Depth == 16)
	{
		int x, y;
		for (y = 0; y < 240; y++)
		{
			register unsigned short *dst = (unsigned short *)((unsigned char *)SurfDesc.lpSurface + y*Pitch);
			for (x = 0; x < 256; x++)
				*dst++ = Palette16[*src++];
		}
	}
	else
	{
		int x, y;
		for (y = 0; y < 240; y++)
		{
			register unsigned short *dst = (unsigned short *)((unsigned char *)SurfDesc.lpSurface + y*Pitch);
			for (x = 0; x < 256; x++)
				*dst++ = Palette15[*src++];
		}
	}
}

void	Update (void)
{
	if (!DirectDraw)
		return;
	Try(SecondarySurf->Lock(NULL, &SurfDesc, DDLOCK_WAIT | DDLOCK_NOSYSLOCK | DDLOCK_WRITEONLY, NULL), _T("Failed to lock secondary surface"));

	if (Fullscreen || Scanlines)
		Draw2x();
	else	Draw1x();

	Try(SecondarySurf->Unlock(NULL), _T("Failed to unlock secondary surface"));
	Repaint();
}

void	Repaint (void)
{
	if (!DirectDraw)
		return;

	if (Fullscreen)
		Try(PrimarySurf->Flip(NULL, DDFLIP_WAIT), _T("Failed to flip to primary surface"));
	else
	{
		RECT rect;
		POINT pt = {0, 0};
		GetClientRect(hMainWnd, &rect);
		if ((rect.right == 0) || (rect.bottom == 0))
			return;
		ClientToScreen(hMainWnd, &pt);
		rect.left += pt.x;
		rect.right += pt.x;
		rect.top += pt.y;
		rect.bottom += pt.y;
		Try(PrimarySurf->Blt(&rect, SecondarySurf, NULL, DDBLT_WAIT, NULL), _T("Failed to blit to primary surface"));
	}
}

void	GetCursorPos (POINT *pos)
{
	::GetCursorPos(pos);
	if (Fullscreen)
	{
		pos->x /= 2;
		pos->y /= 2;
		pos->x -= 32;
	}
	else
	{
		RECT rect;
		ScreenToClient(hMainWnd, pos);
		GetClientRect(hMainWnd, &rect);
		pos->x = pos->x * 256 / (rect.right - rect.left);
		pos->y = pos->y * 240 / (rect.bottom - rect.top);
	}
	
}

void	SetCursorPos (int x, int y)
{
	POINT pos;
	pos.x = x;
	pos.y = y;
	if (!Fullscreen)
	{
		RECT rect;
		GetClientRect(hMainWnd, &rect);
		pos.x = pos.x * (rect.right - rect.left) / 256;
		pos.y = pos.y * (rect.bottom - rect.top) / 240;
		ClientToScreen(hMainWnd, &pos);
	}
	else	pos.x += 32;
	::SetCursorPos(pos.x, pos.y);
}

enum PALETTE { PALETTE_NTSC, PALETTE_PAL, PALETTE_PC10, PALETTE_VS1, PALETTE_VS2, PALETTE_VS3, PALETTE_VS4, PALETTE_EXT, PALETTE_MAX };

BOOL	ZapperHit (int color)
{
	int val = 0;
	val += (int)(RawPalette[(color >> 6) & 0x7][color & 0x3F][0] * 0.299);
	val += (int)(RawPalette[(color >> 6) & 0x7][color & 0x3F][1] * 0.587);
	val += (int)(RawPalette[(color >> 6) & 0x7][color & 0x3F][2] * 0.114);
	return (val >= 0x40);
}

// TODO - make dynamic
static const unsigned char Palette_PAL[8][64][3] =
{
	{	// none
		{0x80,0x80,0x80},{0x00,0x3D,0xA6},{0x00,0x12,0xB0},{0x44,0x00,0x96},{0xA1,0x00,0x5E},{0xC7,0x00,0x28},{0xBA,0x06,0x00},{0x8C,0x17,0x00},{0x5C,0x2F,0x00},{0x10,0x45,0x00},{0x05,0x4A,0x00},{0x00,0x47,0x2E},{0x00,0x41,0x66},{0x00,0x00,0x00},{0x05,0x05,0x05},{0x05,0x05,0x05},
		{0xC7,0xC7,0xC7},{0x00,0x77,0xFF},{0x21,0x55,0xFF},{0x82,0x37,0xFA},{0xEB,0x2F,0xB5},{0xFF,0x29,0x50},{0xFF,0x22,0x00},{0xD6,0x32,0x00},{0xC4,0x62,0x00},{0x35,0x80,0x00},{0x05,0x8F,0x00},{0x00,0x8A,0x55},{0x00,0x99,0xCC},{0x21,0x21,0x21},{0x09,0x09,0x09},{0x09,0x09,0x09},
		{0xFF,0xFF,0xFF},{0x0F,0xD7,0xFF},{0x69,0xA2,0xFF},{0xD4,0x80,0xFF},{0xFF,0x45,0xF3},{0xFF,0x61,0x8B},{0xFF,0x88,0x33},{0xFF,0x9C,0x12},{0xFA,0xBC,0x20},{0x9F,0xE3,0x0E},{0x2B,0xF0,0x35},{0x0C,0xF0,0xA4},{0x05,0xFB,0xFF},{0x5E,0x5E,0x5E},{0x0D,0x0D,0x0D},{0x0D,0x0D,0x0D},
		{0xFF,0xFF,0xFF},{0xA6,0xFC,0xFF},{0xB3,0xEC,0xFF},{0xDA,0xAB,0xEB},{0xFF,0xA8,0xF9},{0xFF,0xAB,0xB3},{0xFF,0xD2,0xB0},{0xFF,0xEF,0xA6},{0xFF,0xF7,0x9C},{0xD7,0xE8,0x95},{0xA6,0xED,0xAF},{0xA2,0xF2,0xDA},{0x99,0xFF,0xFC},{0xDD,0xDD,0xDD},{0x11,0x11,0x11},{0x11,0x11,0x11}
	},
	{	// red
		{0x80,0x66,0x67},{0x00,0x30,0x86},{0x00,0x0E,0x8E},{0x44,0x00,0x79},{0xA1,0x00,0x4C},{0xC7,0x00,0x20},{0xBA,0x04,0x00},{0x8C,0x12,0x00},{0x5C,0x25,0x00},{0x10,0x37,0x00},{0x05,0x3B,0x00},{0x00,0x38,0x25},{0x00,0x34,0x52},{0x00,0x00,0x00},{0x05,0x04,0x04},{0x05,0x04,0x04},
		{0xC7,0x9F,0xA1},{0x00,0x5F,0xCE},{0x21,0x44,0xCE},{0x82,0x2C,0xCA},{0xEB,0x25,0x92},{0xFF,0x20,0x40},{0xFF,0x1B,0x00},{0xD6,0x28,0x00},{0xC4,0x4E,0x00},{0x35,0x66,0x00},{0x05,0x72,0x00},{0x00,0x6E,0x44},{0x00,0x7A,0xA5},{0x21,0x1A,0x1A},{0x09,0x07,0x07},{0x09,0x07,0x07},
		{0xFF,0xCC,0xCE},{0x0F,0xAC,0xCE},{0x69,0x81,0xCE},{0xD4,0x66,0xCE},{0xFF,0x37,0xC4},{0xFF,0x4D,0x70},{0xFF,0x6C,0x29},{0xFF,0x7C,0x0E},{0xFA,0x96,0x19},{0x9F,0xB5,0x0B},{0x2B,0xC0,0x2A},{0x0C,0xC0,0x84},{0x05,0xC8,0xCE},{0x5E,0x4B,0x4C},{0x0D,0x0A,0x0A},{0x0D,0x0A,0x0A},
		{0xFF,0xCC,0xCE},{0xA6,0xC9,0xCE},{0xB3,0xBC,0xCE},{0xDA,0x88,0xBE},{0xFF,0x86,0xC9},{0xFF,0x88,0x90},{0xFF,0xA8,0x8E},{0xFF,0xBF,0x86},{0xFF,0xC5,0x7E},{0xD7,0xB9,0x78},{0xA6,0xBD,0x8D},{0xA2,0xC1,0xB0},{0x99,0xCC,0xCC},{0xDD,0xB0,0xB3},{0x11,0x0D,0x0D},{0x11,0x0D,0x0D}
	},
	{	// green
		{0x63,0x78,0x54},{0x00,0x39,0x6D},{0x00,0x10,0x74},{0x35,0x00,0x63},{0x7D,0x00,0x3E},{0x9B,0x00,0x1A},{0x91,0x05,0x00},{0x6D,0x15,0x00},{0x47,0x2C,0x00},{0x0C,0x40,0x00},{0x03,0x45,0x00},{0x00,0x42,0x1E},{0x00,0x3D,0x43},{0x00,0x00,0x00},{0x03,0x04,0x03},{0x03,0x04,0x03},
		{0x9B,0xBB,0x83},{0x00,0x6F,0xA8},{0x19,0x4F,0xA8},{0x65,0x33,0xA5},{0xB7,0x2C,0x77},{0xC6,0x26,0x34},{0xC6,0x1F,0x00},{0xA6,0x2F,0x00},{0x98,0x5C,0x00},{0x29,0x78,0x00},{0x03,0x86,0x00},{0x00,0x81,0x38},{0x00,0x8F,0x86},{0x19,0x1F,0x15},{0x07,0x08,0x05},{0x07,0x08,0x05},
		{0xC6,0xEF,0xA8},{0x0B,0xCA,0xA8},{0x51,0x98,0xA8},{0xA5,0x78,0xA8},{0xC6,0x40,0xA0},{0xC6,0x5B,0x5B},{0xC6,0x7F,0x21},{0xC6,0x92,0x0B},{0xC3,0xB0,0x15},{0x7C,0xD5,0x09},{0x21,0xE1,0x22},{0x09,0xE1,0x6C},{0x03,0xEB,0xA8},{0x49,0x58,0x3E},{0x0A,0x0C,0x08},{0x0A,0x0C,0x08},
		{0xC6,0xEF,0xA8},{0x81,0xEC,0xA8},{0x8B,0xDD,0xA8},{0xAA,0xA0,0x9B},{0xC6,0x9D,0xA4},{0xC6,0xA0,0x76},{0xC6,0xC5,0x74},{0xC6,0xE0,0x6D},{0xC6,0xE8,0x66},{0xA7,0xDA,0x62},{0x81,0xDE,0x73},{0x7E,0xE3,0x8F},{0x77,0xEF,0xA6},{0xAC,0xCF,0x91},{0x0D,0x0F,0x0B},{0x0D,0x0F,0x0B}
	},
	{	// yellow
		{0x65,0x62,0x50},{0x00,0x2E,0x68},{0x00,0x0D,0x6E},{0x35,0x00,0x5E},{0x7F,0x00,0x3B},{0x9D,0x00,0x19},{0x92,0x04,0x00},{0x6E,0x11,0x00},{0x48,0x24,0x00},{0x0C,0x35,0x00},{0x03,0x38,0x00},{0x00,0x36,0x1C},{0x00,0x32,0x40},{0x00,0x00,0x00},{0x03,0x03,0x03},{0x03,0x03,0x03},
		{0x9D,0x99,0x7D},{0x00,0x5B,0xA0},{0x1A,0x41,0xA0},{0x66,0x2A,0x9D},{0xB9,0x24,0x72},{0xC9,0x1F,0x32},{0xC9,0x1A,0x00},{0xA9,0x26,0x00},{0x9A,0x4B,0x00},{0x29,0x62,0x00},{0x03,0x6E,0x00},{0x00,0x6A,0x35},{0x00,0x75,0x80},{0x1A,0x19,0x14},{0x07,0x06,0x05},{0x07,0x06,0x05},
		{0xC9,0xC4,0xA0},{0x0B,0xA5,0xA0},{0x52,0x7C,0xA0},{0xA7,0x62,0xA0},{0xC9,0x35,0x99},{0xC9,0x4A,0x57},{0xC9,0x68,0x20},{0xC9,0x78,0x0B},{0xC5,0x90,0x14},{0x7D,0xAE,0x08},{0x21,0xB8,0x21},{0x09,0xB8,0x67},{0x03,0xC1,0xA0},{0x4A,0x48,0x3B},{0x0A,0x0A,0x08},{0x0A,0x0A,0x08},
		{0xC9,0xC4,0xA0},{0x83,0xC2,0xA0},{0x8D,0xB5,0xA0},{0xAC,0x83,0x94},{0xC9,0x81,0x9C},{0xC9,0x83,0x70},{0xC9,0xA1,0x6E},{0xC9,0xB8,0x68},{0xC9,0xBE,0x62},{0xA9,0xB2,0x5D},{0x83,0xB6,0x6E},{0x7F,0xBA,0x89},{0x78,0xC4,0x9E},{0xAE,0xAA,0x8B},{0x0D,0x0D,0x0A},{0x0D,0x0D,0x0A}
	},
	{	// blue
		{0x68,0x6A,0x8F},{0x00,0x32,0xB9},{0x00,0x0E,0xC5},{0x37,0x00,0xA8},{0x84,0x00,0x69},{0xA3,0x00,0x2C},{0x98,0x04,0x00},{0x72,0x13,0x00},{0x4B,0x27,0x00},{0x0D,0x39,0x00},{0x04,0x3D,0x00},{0x00,0x3A,0x33},{0x00,0x35,0x72},{0x00,0x00,0x00},{0x04,0x04,0x05},{0x04,0x04,0x05},
		{0xA3,0xA5,0xDE},{0x00,0x62,0xFF},{0x1B,0x46,0xFF},{0x6A,0x2D,0xFF},{0xC0,0x27,0xCA},{0xD1,0x22,0x59},{0xD1,0x1C,0x00},{0xAF,0x29,0x00},{0xA0,0x51,0x00},{0x2B,0x6A,0x00},{0x04,0x76,0x00},{0x00,0x72,0x5F},{0x00,0x7E,0xE4},{0x1B,0x1B,0x24},{0x07,0x07,0x0A},{0x07,0x07,0x0A},
		{0xD1,0xD3,0xFF},{0x0C,0xB2,0xFF},{0x56,0x86,0xFF},{0xAD,0x6A,0xFF},{0xD1,0x39,0xFF},{0xD1,0x50,0x9B},{0xD1,0x70,0x39},{0xD1,0x81,0x14},{0xCD,0x9C,0x23},{0x82,0xBC,0x0F},{0x23,0xC7,0x3B},{0x09,0xC7,0xB7},{0x04,0xD0,0xFF},{0x4D,0x4E,0x69},{0x0A,0x0A,0x0E},{0x0A,0x0A,0x0E},
		{0xD1,0xD3,0xFF},{0x88,0xD1,0xFF},{0x92,0xC3,0xFF},{0xB2,0x8D,0xFF},{0xD1,0x8B,0xFF},{0xD1,0x8D,0xC8},{0xD1,0xAE,0xC5},{0xD1,0xC6,0xB9},{0xD1,0xCD,0xAE},{0xB0,0xC0,0xA6},{0x88,0xC4,0xC4},{0x84,0xC8,0xF4},{0x7D,0xD3,0xFF},{0xB5,0xB7,0xF7},{0x0D,0x0E,0x13},{0x0D,0x0E,0x13}
	},
	{	// magenta
		{0x67,0x5A,0x6F},{0x00,0x2B,0x90},{0x00,0x0C,0x99},{0x37,0x00,0x82},{0x82,0x00,0x51},{0xA1,0x00,0x22},{0x96,0x04,0x00},{0x71,0x10,0x00},{0x4A,0x21,0x00},{0x0C,0x30,0x00},{0x04,0x34,0x00},{0x00,0x32,0x28},{0x00,0x2E,0x58},{0x00,0x00,0x00},{0x04,0x03,0x04},{0x04,0x03,0x04},
		{0xA1,0x8D,0xAD},{0x00,0x54,0xDD},{0x1A,0x3C,0xDD},{0x69,0x27,0xD9},{0xBE,0x21,0x9D},{0xCE,0x1D,0x45},{0xCE,0x18,0x00},{0xAD,0x23,0x00},{0x9E,0x45,0x00},{0x2A,0x5A,0x00},{0x04,0x65,0x00},{0x00,0x61,0x49},{0x00,0x6C,0xB1},{0x1A,0x17,0x1C},{0x07,0x06,0x07},{0x07,0x06,0x07},
		{0xCE,0xB5,0xDD},{0x0C,0x98,0xDD},{0x55,0x73,0xDD},{0xAB,0x5A,0xDD},{0xCE,0x30,0xD3},{0xCE,0x44,0x78},{0xCE,0x60,0x2C},{0xCE,0x6E,0x0F},{0xCA,0x85,0x1B},{0x80,0xA1,0x0C},{0x22,0xAA,0x2E},{0x09,0xAA,0x8E},{0x04,0xB2,0xDD},{0x4C,0x42,0x51},{0x0A,0x09,0x0B},{0x0A,0x09,0x0B},
		{0xCE,0xB5,0xDD},{0x86,0xB2,0xDD},{0x90,0xA7,0xDD},{0xB0,0x79,0xCC},{0xCE,0x77,0xD8},{0xCE,0x79,0x9B},{0xCE,0x95,0x99},{0xCE,0xA9,0x90},{0xCE,0xAF,0x87},{0xAE,0xA4,0x81},{0x86,0xA8,0x98},{0x83,0xAB,0xBD},{0x7B,0xB5,0xDB},{0xB3,0x9C,0xC0},{0x0D,0x0C,0x0E},{0x0D,0x0C,0x0E}
	},
	{	// cyan
		{0x57,0x65,0x65},{0x00,0x30,0x83},{0x00,0x0E,0x8B},{0x2E,0x00,0x76},{0x6D,0x00,0x4A},{0x87,0x00,0x1F},{0x7E,0x04,0x00},{0x5F,0x12,0x00},{0x3E,0x25,0x00},{0x0A,0x36,0x00},{0x03,0x3A,0x00},{0x00,0x38,0x24},{0x00,0x33,0x50},{0x00,0x00,0x00},{0x03,0x03,0x03},{0x03,0x03,0x03},
		{0x87,0x9D,0x9D},{0x00,0x5E,0xC9},{0x16,0x43,0xC9},{0x58,0x2B,0xC5},{0x9F,0x25,0x8E},{0xAD,0x20,0x3F},{0xAD,0x1A,0x00},{0x91,0x27,0x00},{0x85,0x4D,0x00},{0x24,0x65,0x00},{0x03,0x70,0x00},{0x00,0x6D,0x43},{0x00,0x78,0xA1},{0x16,0x1A,0x1A},{0x06,0x07,0x07},{0x06,0x07,0x07},
		{0xAD,0xC9,0xC9},{0x0A,0xA9,0xC9},{0x47,0x7F,0xC9},{0x90,0x65,0xC9},{0xAD,0x36,0xBF},{0xAD,0x4C,0x6D},{0xAD,0x6B,0x28},{0xAD,0x7B,0x0E},{0xAA,0x94,0x19},{0x6C,0xB3,0x0B},{0x1D,0xBD,0x29},{0x08,0xBD,0x81},{0x03,0xC6,0xC9},{0x3F,0x4A,0x4A},{0x08,0x0A,0x0A},{0x08,0x0A,0x0A},
		{0xAD,0xC9,0xC9},{0x70,0xC7,0xC9},{0x79,0xBA,0xC9},{0x94,0x87,0xB9},{0xAD,0x84,0xC4},{0xAD,0x87,0x8D},{0xAD,0xA5,0x8B},{0xAD,0xBC,0x83},{0xAD,0xC3,0x7B},{0x92,0xB7,0x75},{0x70,0xBB,0x8A},{0x6E,0xBF,0xAC},{0x68,0xC9,0xC7},{0x96,0xAE,0xAE},{0x0B,0x0D,0x0D},{0x0B,0x0D,0x0D}
	},
	{	// white
		{0x59,0x59,0x59},{0x00,0x2A,0x74},{0x00,0x0C,0x7B},{0x2F,0x00,0x69},{0x70,0x00,0x41},{0x8B,0x00,0x1C},{0x82,0x04,0x00},{0x62,0x10,0x00},{0x40,0x20,0x00},{0x0B,0x30,0x00},{0x03,0x33,0x00},{0x00,0x31,0x20},{0x00,0x2D,0x47},{0x00,0x00,0x00},{0x03,0x03,0x03},{0x03,0x03,0x03},
		{0x8B,0x8B,0x8B},{0x00,0x53,0xB2},{0x17,0x3B,0xB2},{0x5B,0x26,0xAF},{0xA4,0x20,0x7E},{0xB2,0x1C,0x38},{0xB2,0x17,0x00},{0x95,0x23,0x00},{0x89,0x44,0x00},{0x25,0x59,0x00},{0x03,0x64,0x00},{0x00,0x60,0x3B},{0x00,0x6B,0x8E},{0x17,0x17,0x17},{0x06,0x06,0x06},{0x06,0x06,0x06},
		{0xB2,0xB2,0xB2},{0x0A,0x96,0xB2},{0x49,0x71,0xB2},{0x94,0x59,0xB2},{0xB2,0x30,0xAA},{0xB2,0x43,0x61},{0xB2,0x5F,0x23},{0xB2,0x6D,0x0C},{0xAF,0x83,0x16},{0x6F,0x9E,0x09},{0x1E,0xA8,0x25},{0x08,0xA8,0x72},{0x03,0xAF,0xB2},{0x41,0x41,0x41},{0x09,0x09,0x09},{0x09,0x09,0x09},
		{0xB2,0xB2,0xB2},{0x74,0xB0,0xB2},{0x7D,0xA5,0xB2},{0x98,0x77,0xA4},{0xB2,0x75,0xAE},{0xB2,0x77,0x7D},{0xB2,0x93,0x7B},{0xB2,0xA7,0x74},{0xB2,0xAC,0x6D},{0x96,0xA2,0x68},{0x74,0xA5,0x7A},{0x71,0xA9,0x98},{0x6B,0xB2,0xB0},{0x9A,0x9A,0x9A},{0x0B,0x0B,0x0B},{0x0B,0x0B,0x0B}
	}
};
static const unsigned char Palette_PC10[8][64][3] =
{
	{	// none
		{0x6D,0x6D,0x6D},{0x00,0x24,0x92},{0x00,0x00,0xDB},{0x6D,0x49,0xDB},{0x92,0x00,0x6D},{0xB6,0x00,0x6D},{0xB6,0x24,0x00},{0x92,0x49,0x00},{0x6D,0x49,0x00},{0x24,0x49,0x00},{0x00,0x6D,0x24},{0x00,0x92,0x00},{0x00,0x49,0x49},{0x00,0x00,0x00},{0x00,0x00,0x00},{0x00,0x00,0x00},
		{0xB6,0xB6,0xB6},{0x00,0x6D,0xDB},{0x00,0x49,0xFF},{0x92,0x00,0xFF},{0xB6,0x00,0xFF},{0xFF,0x00,0x92},{0xFF,0x00,0x00},{0xDB,0x6D,0x00},{0x92,0x6D,0x00},{0x24,0x92,0x00},{0x00,0x92,0x00},{0x00,0xB6,0x6D},{0x00,0x92,0x92},{0x24,0x24,0x24},{0x00,0x00,0x00},{0x00,0x00,0x00},
		{0xFF,0xFF,0xFF},{0x6D,0xB6,0xFF},{0x92,0x92,0xFF},{0xDB,0x6D,0xFF},{0xFF,0x00,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x92,0x00},{0xFF,0xB6,0x00},{0xDB,0xDB,0x00},{0x6D,0xDB,0x00},{0x00,0xFF,0x00},{0x49,0xFF,0xDB},{0x00,0xFF,0xFF},{0x49,0x49,0x49},{0x00,0x00,0x00},{0x00,0x00,0x00},
		{0xFF,0xFF,0xFF},{0xB6,0xDB,0xFF},{0xDB,0xB6,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x92,0xFF},{0xFF,0xB6,0xB6},{0xFF,0xDB,0x92},{0xFF,0xFF,0x49},{0xFF,0xFF,0x6D},{0xB6,0xFF,0x49},{0x92,0xFF,0x6D},{0x49,0xFF,0xDB},{0x92,0xDB,0xFF},{0x92,0x92,0x92},{0x00,0x00,0x00},{0x00,0x00,0x00}
	},
	{	// red
		{0xFF,0x6D,0x6D},{0xFF,0x24,0x92},{0xFF,0x00,0xDB},{0xFF,0x49,0xDB},{0xFF,0x00,0x6D},{0xFF,0x00,0x6D},{0xFF,0x24,0x00},{0xFF,0x49,0x00},{0xFF,0x49,0x00},{0xFF,0x49,0x00},{0xFF,0x6D,0x24},{0xFF,0x92,0x00},{0xFF,0x49,0x49},{0xFF,0x00,0x00},{0xFF,0x00,0x00},{0xFF,0x00,0x00},
		{0xFF,0xB6,0xB6},{0xFF,0x6D,0xDB},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0x92},{0xFF,0x00,0x00},{0xFF,0x6D,0x00},{0xFF,0x6D,0x00},{0xFF,0x92,0x00},{0xFF,0x92,0x00},{0xFF,0xB6,0x6D},{0xFF,0x92,0x92},{0xFF,0x24,0x24},{0xFF,0x00,0x00},{0xFF,0x00,0x00},
		{0xFF,0xFF,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x92,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x00,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x92,0x00},{0xFF,0xB6,0x00},{0xFF,0xDB,0x00},{0xFF,0xDB,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xDB},{0xFF,0xFF,0xFF},{0xFF,0x49,0x49},{0xFF,0x00,0x00},{0xFF,0x00,0x00},
		{0xFF,0xFF,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x92,0xFF},{0xFF,0xB6,0xB6},{0xFF,0xDB,0x92},{0xFF,0xFF,0x49},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x49},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xDB},{0xFF,0xDB,0xFF},{0xFF,0x92,0x92},{0xFF,0x00,0x00},{0xFF,0x00,0x00}
	},
	{	// green
		{0x6D,0xFF,0x6D},{0x00,0xFF,0x92},{0x00,0xFF,0xDB},{0x6D,0xFF,0xDB},{0x92,0xFF,0x6D},{0xB6,0xFF,0x6D},{0xB6,0xFF,0x00},{0x92,0xFF,0x00},{0x6D,0xFF,0x00},{0x24,0xFF,0x00},{0x00,0xFF,0x24},{0x00,0xFF,0x00},{0x00,0xFF,0x49},{0x00,0xFF,0x00},{0x00,0xFF,0x00},{0x00,0xFF,0x00},
		{0xB6,0xFF,0xB6},{0x00,0xFF,0xDB},{0x00,0xFF,0xFF},{0x92,0xFF,0xFF},{0xB6,0xFF,0xFF},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0xDB,0xFF,0x00},{0x92,0xFF,0x00},{0x24,0xFF,0x00},{0x00,0xFF,0x00},{0x00,0xFF,0x6D},{0x00,0xFF,0x92},{0x24,0xFF,0x24},{0x00,0xFF,0x00},{0x00,0xFF,0x00},
		{0xFF,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x92,0xFF,0xFF},{0xDB,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xDB,0xFF,0x00},{0x6D,0xFF,0x00},{0x00,0xFF,0x00},{0x49,0xFF,0xDB},{0x00,0xFF,0xFF},{0x49,0xFF,0x49},{0x00,0xFF,0x00},{0x00,0xFF,0x00},
		{0xFF,0xFF,0xFF},{0xB6,0xFF,0xFF},{0xDB,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xB6},{0xFF,0xFF,0x92},{0xFF,0xFF,0x49},{0xFF,0xFF,0x6D},{0xB6,0xFF,0x49},{0x92,0xFF,0x6D},{0x49,0xFF,0xDB},{0x92,0xFF,0xFF},{0x92,0xFF,0x92},{0x00,0xFF,0x00},{0x00,0xFF,0x00}
	},
	{	// yellow
		{0xFF,0xFF,0x6D},{0xFF,0xFF,0x92},{0xFF,0xFF,0xDB},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x24},{0xFF,0xFF,0x00},{0xFF,0xFF,0x49},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},
		{0xFF,0xFF,0xB6},{0xFF,0xFF,0xDB},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x92},{0xFF,0xFF,0x24},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xDB},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x49},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xB6},{0xFF,0xFF,0x92},{0xFF,0xFF,0x49},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x49},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xDB},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00}
	},
	{	// blue
		{0x6D,0x6D,0xFF},{0x00,0x24,0xFF},{0x00,0x00,0xFF},{0x6D,0x49,0xFF},{0x92,0x00,0xFF},{0xB6,0x00,0xFF},{0xB6,0x24,0xFF},{0x92,0x49,0xFF},{0x6D,0x49,0xFF},{0x24,0x49,0xFF},{0x00,0x6D,0xFF},{0x00,0x92,0xFF},{0x00,0x49,0xFF},{0x00,0x00,0xFF},{0x00,0x00,0xFF},{0x00,0x00,0xFF},
		{0xB6,0xB6,0xFF},{0x00,0x6D,0xFF},{0x00,0x49,0xFF},{0x92,0x00,0xFF},{0xB6,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xDB,0x6D,0xFF},{0x92,0x6D,0xFF},{0x24,0x92,0xFF},{0x00,0x92,0xFF},{0x00,0xB6,0xFF},{0x00,0x92,0xFF},{0x24,0x24,0xFF},{0x00,0x00,0xFF},{0x00,0x00,0xFF},
		{0xFF,0xFF,0xFF},{0x6D,0xB6,0xFF},{0x92,0x92,0xFF},{0xDB,0x6D,0xFF},{0xFF,0x00,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x92,0xFF},{0xFF,0xB6,0xFF},{0xDB,0xDB,0xFF},{0x6D,0xDB,0xFF},{0x00,0xFF,0xFF},{0x49,0xFF,0xFF},{0x00,0xFF,0xFF},{0x49,0x49,0xFF},{0x00,0x00,0xFF},{0x00,0x00,0xFF},
		{0xFF,0xFF,0xFF},{0xB6,0xDB,0xFF},{0xDB,0xB6,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x92,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x92,0xFF,0xFF},{0x49,0xFF,0xFF},{0x92,0xDB,0xFF},{0x92,0x92,0xFF},{0x00,0x00,0xFF},{0x00,0x00,0xFF}
	},
	{	// magenta
		{0xFF,0x6D,0xFF},{0xFF,0x24,0xFF},{0xFF,0x00,0xFF},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x24,0xFF},{0xFF,0x49,0xFF},{0xFF,0x49,0xFF},{0xFF,0x49,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x92,0xFF},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},
		{0xFF,0xB6,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x92,0xFF},{0xFF,0x92,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x92,0xFF},{0xFF,0x24,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x92,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x00,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x92,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x92,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x92,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF}
	},
	{	// cyan
		{0x6D,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x92,0xFF,0xFF},{0xB6,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x92,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x24,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},
		{0xB6,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x92,0xFF,0xFF},{0xB6,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x92,0xFF,0xFF},{0x24,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x24,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x92,0xFF,0xFF},{0xDB,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x00,0xFF,0xFF},{0x49,0xFF,0xFF},{0x00,0xFF,0xFF},{0x49,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xB6,0xFF,0xFF},{0xDB,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x92,0xFF,0xFF},{0x49,0xFF,0xFF},{0x92,0xFF,0xFF},{0x92,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF}
	},
	{	// white
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF}
	}
};
static const unsigned char Palette_VS_0001[8][64][3] =
{
	{	// none
		{0xFF,0xB6,0xB6},{0xDB,0x6D,0xFF},{0xFF,0x00,0x00},{0x92,0x92,0xFF},{0x00,0x92,0x92},{0x24,0x49,0x00},{0x49,0x49,0x49},{0xFF,0x00,0x92},{0xFF,0xFF,0xFF},{0x6D,0x6D,0x6D},{0xFF,0xB6,0x00},{0xB6,0x00,0x6D},{0x92,0x00,0x6D},{0xDB,0xDB,0x00},{0x6D,0x49,0x00},{0xFF,0xFF,0xFF},
		{0x6D,0xB6,0xFF},{0xDB,0xB6,0x6D},{0x6D,0x24,0x00},{0x6D,0xDB,0x00},{0x92,0xDB,0xFF},{0xDB,0xB6,0xFF},{0xFF,0xDB,0x92},{0x00,0x49,0xFF},{0xFF,0xDB,0x00},{0x49,0xFF,0xDB},{0x00,0x00,0x00},{0x49,0x00,0x00},{0xDB,0xDB,0xDB},{0x92,0x92,0x92},{0xFF,0x00,0xFF},{0x00,0x24,0x92},
		{0x00,0x00,0x6D},{0xB6,0xDB,0xFF},{0xFF,0xB6,0xFF},{0x00,0xFF,0x00},{0x00,0xFF,0xFF},{0x00,0x49,0x49},{0x00,0xB6,0x6D},{0xB6,0x00,0xFF},{0x00,0x00,0x00},{0x92,0x49,0x00},{0xFF,0x92,0xFF},{0xB6,0x24,0x00},{0x92,0x00,0xFF},{0x00,0x00,0xDB},{0xFF,0x92,0x00},{0x00,0x00,0x00},
		{0x00,0x00,0x00},{0x24,0x92,0x00},{0xB6,0xB6,0xB6},{0x00,0x6D,0x24},{0xB6,0xFF,0x49},{0x6D,0x49,0xDB},{0xFF,0xFF,0x00},{0xDB,0x6D,0x00},{0x00,0x49,0x00},{0x00,0x6D,0xDB},{0x00,0x92,0x00},{0x24,0x24,0x24},{0xFF,0xFF,0x6D},{0xFF,0x6D,0xFF},{0x92,0x6D,0x00},{0x92,0xFF,0x6D}
	},
	{	// red
		{0xFF,0xB6,0xB6},{0xFF,0x6D,0xFF},{0xFF,0x00,0x00},{0xFF,0x92,0xFF},{0xFF,0x92,0x92},{0xFF,0x49,0x00},{0xFF,0x49,0x49},{0xFF,0x00,0x92},{0xFF,0xFF,0xFF},{0xFF,0x6D,0x6D},{0xFF,0xB6,0x00},{0xFF,0x00,0x6D},{0xFF,0x00,0x6D},{0xFF,0xDB,0x00},{0xFF,0x49,0x00},{0xFF,0xFF,0xFF},
		{0xFF,0xB6,0xFF},{0xFF,0xB6,0x6D},{0xFF,0x24,0x00},{0xFF,0xDB,0x00},{0xFF,0xDB,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xDB,0x92},{0xFF,0x49,0xFF},{0xFF,0xDB,0x00},{0xFF,0xFF,0xDB},{0xFF,0x00,0x00},{0xFF,0x00,0x00},{0xFF,0xDB,0xDB},{0xFF,0x92,0x92},{0xFF,0x00,0xFF},{0xFF,0x24,0x92},
		{0xFF,0x00,0x6D},{0xFF,0xDB,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0x49,0x49},{0xFF,0xB6,0x6D},{0xFF,0x00,0xFF},{0xFF,0x00,0x00},{0xFF,0x49,0x00},{0xFF,0x92,0xFF},{0xFF,0x24,0x00},{0xFF,0x00,0xFF},{0xFF,0x00,0xDB},{0xFF,0x92,0x00},{0xFF,0x00,0x00},
		{0xFF,0x00,0x00},{0xFF,0x92,0x00},{0xFF,0xB6,0xB6},{0xFF,0x6D,0x24},{0xFF,0xFF,0x49},{0xFF,0x49,0xDB},{0xFF,0xFF,0x00},{0xFF,0x6D,0x00},{0xFF,0x49,0x00},{0xFF,0x6D,0xDB},{0xFF,0x92,0x00},{0xFF,0x24,0x24},{0xFF,0xFF,0x6D},{0xFF,0x6D,0xFF},{0xFF,0x6D,0x00},{0xFF,0xFF,0x6D}
	},
	{	// green
		{0xFF,0xFF,0xB6},{0xDB,0xFF,0xFF},{0xFF,0xFF,0x00},{0x92,0xFF,0xFF},{0x00,0xFF,0x92},{0x24,0xFF,0x00},{0x49,0xFF,0x49},{0xFF,0xFF,0x92},{0xFF,0xFF,0xFF},{0x6D,0xFF,0x6D},{0xFF,0xFF,0x00},{0xB6,0xFF,0x6D},{0x92,0xFF,0x6D},{0xDB,0xFF,0x00},{0x6D,0xFF,0x00},{0xFF,0xFF,0xFF},
		{0x6D,0xFF,0xFF},{0xDB,0xFF,0x6D},{0x6D,0xFF,0x00},{0x6D,0xFF,0x00},{0x92,0xFF,0xFF},{0xDB,0xFF,0xFF},{0xFF,0xFF,0x92},{0x00,0xFF,0xFF},{0xFF,0xFF,0x00},{0x49,0xFF,0xDB},{0x00,0xFF,0x00},{0x49,0xFF,0x00},{0xDB,0xFF,0xDB},{0x92,0xFF,0x92},{0xFF,0xFF,0xFF},{0x00,0xFF,0x92},
		{0x00,0xFF,0x6D},{0xB6,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0x00},{0x00,0xFF,0xFF},{0x00,0xFF,0x49},{0x00,0xFF,0x6D},{0xB6,0xFF,0xFF},{0x00,0xFF,0x00},{0x92,0xFF,0x00},{0xFF,0xFF,0xFF},{0xB6,0xFF,0x00},{0x92,0xFF,0xFF},{0x00,0xFF,0xDB},{0xFF,0xFF,0x00},{0x00,0xFF,0x00},
		{0x00,0xFF,0x00},{0x24,0xFF,0x00},{0xB6,0xFF,0xB6},{0x00,0xFF,0x24},{0xB6,0xFF,0x49},{0x6D,0xFF,0xDB},{0xFF,0xFF,0x00},{0xDB,0xFF,0x00},{0x00,0xFF,0x00},{0x00,0xFF,0xDB},{0x00,0xFF,0x00},{0x24,0xFF,0x24},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xFF},{0x92,0xFF,0x00},{0x92,0xFF,0x6D}
	},
	{	// yellow
		{0xFF,0xFF,0xB6},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0xFF,0xFF,0x49},{0xFF,0xFF,0x92},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x00},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x92},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x92},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x92},
		{0xFF,0xFF,0x6D},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x49},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},
		{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xB6},{0xFF,0xFF,0x24},{0xFF,0xFF,0x49},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x00},{0xFF,0xFF,0x24},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x6D}
	},
	{	// blue
		{0xFF,0xB6,0xFF},{0xDB,0x6D,0xFF},{0xFF,0x00,0xFF},{0x92,0x92,0xFF},{0x00,0x92,0xFF},{0x24,0x49,0xFF},{0x49,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0xFF,0xFF},{0x6D,0x6D,0xFF},{0xFF,0xB6,0xFF},{0xB6,0x00,0xFF},{0x92,0x00,0xFF},{0xDB,0xDB,0xFF},{0x6D,0x49,0xFF},{0xFF,0xFF,0xFF},
		{0x6D,0xB6,0xFF},{0xDB,0xB6,0xFF},{0x6D,0x24,0xFF},{0x6D,0xDB,0xFF},{0x92,0xDB,0xFF},{0xDB,0xB6,0xFF},{0xFF,0xDB,0xFF},{0x00,0x49,0xFF},{0xFF,0xDB,0xFF},{0x49,0xFF,0xFF},{0x00,0x00,0xFF},{0x49,0x00,0xFF},{0xDB,0xDB,0xFF},{0x92,0x92,0xFF},{0xFF,0x00,0xFF},{0x00,0x24,0xFF},
		{0x00,0x00,0xFF},{0xB6,0xDB,0xFF},{0xFF,0xB6,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0x49,0xFF},{0x00,0xB6,0xFF},{0xB6,0x00,0xFF},{0x00,0x00,0xFF},{0x92,0x49,0xFF},{0xFF,0x92,0xFF},{0xB6,0x24,0xFF},{0x92,0x00,0xFF},{0x00,0x00,0xFF},{0xFF,0x92,0xFF},{0x00,0x00,0xFF},
		{0x00,0x00,0xFF},{0x24,0x92,0xFF},{0xB6,0xB6,0xFF},{0x00,0x6D,0xFF},{0xB6,0xFF,0xFF},{0x6D,0x49,0xFF},{0xFF,0xFF,0xFF},{0xDB,0x6D,0xFF},{0x00,0x49,0xFF},{0x00,0x6D,0xFF},{0x00,0x92,0xFF},{0x24,0x24,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x6D,0xFF},{0x92,0x6D,0xFF},{0x92,0xFF,0xFF}
	},
	{	// magenta
		{0xFF,0xB6,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x00,0xFF},{0xFF,0x92,0xFF},{0xFF,0x92,0xFF},{0xFF,0x49,0xFF},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x6D,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x49,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xB6,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x24,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x49,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x92,0xFF},{0xFF,0x00,0xFF},{0xFF,0x24,0xFF},
		{0xFF,0x00,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x49,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x49,0xFF},{0xFF,0x92,0xFF},{0xFF,0x24,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x92,0xFF},{0xFF,0x00,0xFF},
		{0xFF,0x00,0xFF},{0xFF,0x92,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x6D,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x49,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x49,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x92,0xFF},{0xFF,0x24,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x6D,0xFF},{0xFF,0xFF,0xFF}
	},
	{	// cyan
		{0xFF,0xFF,0xFF},{0xDB,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x92,0xFF,0xFF},{0x00,0xFF,0xFF},{0x24,0xFF,0xFF},{0x49,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x6D,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x92,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x6D,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0x6D,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x92,0xFF,0xFF},{0xDB,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x49,0xFF,0xFF},{0x00,0xFF,0xFF},{0x49,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x92,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xFF},
		{0x00,0xFF,0xFF},{0xB6,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x00,0xFF,0xFF},{0x92,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x92,0xFF,0xFF},{0x00,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xFF},
		{0x00,0xFF,0xFF},{0x24,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x00,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x6D,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x24,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x92,0xFF,0xFF},{0x92,0xFF,0xFF}
	},
	{	// white
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF}
	}
};
static const unsigned char Palette_VS_0002[8][64][3] =
{
	{	// none
		{0x00,0x00,0x00},{0xFF,0xB6,0x00},{0x92,0x6D,0x00},{0xB6,0xFF,0x49},{0x92,0xFF,0x6D},{0xFF,0x6D,0xFF},{0x00,0x92,0x92},{0xB6,0xDB,0xFF},{0xFF,0x00,0x00},{0x92,0x00,0xFF},{0xFF,0xFF,0x6D},{0xFF,0x92,0xFF},{0xFF,0xFF,0xFF},{0xDB,0x6D,0xFF},{0x92,0xDB,0xFF},{0x00,0x92,0x00},
		{0x00,0x49,0x00},{0x6D,0xB6,0xFF},{0xB6,0x24,0x00},{0xDB,0xDB,0xDB},{0x00,0xB6,0x6D},{0x6D,0xDB,0x00},{0x49,0x00,0x00},{0x92,0x92,0xFF},{0x49,0x49,0x49},{0xFF,0x00,0xFF},{0x00,0x00,0x6D},{0x49,0xFF,0xDB},{0xDB,0xB6,0xFF},{0x6D,0x49,0x00},{0x00,0x00,0x00},{0x6D,0x49,0xDB},
		{0x92,0x00,0x6D},{0xFF,0xDB,0x92},{0xFF,0x92,0x00},{0xFF,0xB6,0xFF},{0x00,0x6D,0xDB},{0x6D,0x24,0x00},{0xB6,0xB6,0xB6},{0x00,0x00,0xDB},{0xB6,0x00,0xFF},{0xFF,0xDB,0x00},{0x6D,0x6D,0x6D},{0x24,0x49,0x00},{0x00,0x49,0xFF},{0x00,0x00,0x00},{0xDB,0xDB,0x00},{0xFF,0xFF,0xFF},
		{0xDB,0xB6,0x6D},{0x24,0x24,0x24},{0x00,0xFF,0x00},{0xDB,0x6D,0x00},{0x00,0x49,0x49},{0x00,0x24,0x92},{0xFF,0x00,0x92},{0x24,0x92,0x00},{0x00,0x00,0x00},{0x00,0xFF,0xFF},{0x92,0x49,0x00},{0xFF,0xFF,0x00},{0xFF,0xB6,0xB6},{0xB6,0x00,0x6D},{0x00,0x6D,0x24},{0x92,0x92,0x92}
	},
	{	// red
		{0xFF,0x00,0x00},{0xFF,0xB6,0x00},{0xFF,0x6D,0x00},{0xFF,0xFF,0x49},{0xFF,0xFF,0x6D},{0xFF,0x6D,0xFF},{0xFF,0x92,0x92},{0xFF,0xDB,0xFF},{0xFF,0x00,0x00},{0xFF,0x00,0xFF},{0xFF,0xFF,0x6D},{0xFF,0x92,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x6D,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x92,0x00},
		{0xFF,0x49,0x00},{0xFF,0xB6,0xFF},{0xFF,0x24,0x00},{0xFF,0xDB,0xDB},{0xFF,0xB6,0x6D},{0xFF,0xDB,0x00},{0xFF,0x00,0x00},{0xFF,0x92,0xFF},{0xFF,0x49,0x49},{0xFF,0x00,0xFF},{0xFF,0x00,0x6D},{0xFF,0xFF,0xDB},{0xFF,0xB6,0xFF},{0xFF,0x49,0x00},{0xFF,0x00,0x00},{0xFF,0x49,0xDB},
		{0xFF,0x00,0x6D},{0xFF,0xDB,0x92},{0xFF,0x92,0x00},{0xFF,0xB6,0xFF},{0xFF,0x6D,0xDB},{0xFF,0x24,0x00},{0xFF,0xB6,0xB6},{0xFF,0x00,0xDB},{0xFF,0x00,0xFF},{0xFF,0xDB,0x00},{0xFF,0x6D,0x6D},{0xFF,0x49,0x00},{0xFF,0x49,0xFF},{0xFF,0x00,0x00},{0xFF,0xDB,0x00},{0xFF,0xFF,0xFF},
		{0xFF,0xB6,0x6D},{0xFF,0x24,0x24},{0xFF,0xFF,0x00},{0xFF,0x6D,0x00},{0xFF,0x49,0x49},{0xFF,0x24,0x92},{0xFF,0x00,0x92},{0xFF,0x92,0x00},{0xFF,0x00,0x00},{0xFF,0xFF,0xFF},{0xFF,0x49,0x00},{0xFF,0xFF,0x00},{0xFF,0xB6,0xB6},{0xFF,0x00,0x6D},{0xFF,0x6D,0x24},{0xFF,0x92,0x92}
	},
	{	// green
		{0x00,0xFF,0x00},{0xFF,0xFF,0x00},{0x92,0xFF,0x00},{0xB6,0xFF,0x49},{0x92,0xFF,0x6D},{0xFF,0xFF,0xFF},{0x00,0xFF,0x92},{0xB6,0xFF,0xFF},{0xFF,0xFF,0x00},{0x92,0xFF,0xFF},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x92,0xFF,0xFF},{0x00,0xFF,0x00},
		{0x00,0xFF,0x00},{0x6D,0xFF,0xFF},{0xB6,0xFF,0x00},{0xDB,0xFF,0xDB},{0x00,0xFF,0x6D},{0x6D,0xFF,0x00},{0x49,0xFF,0x00},{0x92,0xFF,0xFF},{0x49,0xFF,0x49},{0xFF,0xFF,0xFF},{0x00,0xFF,0x6D},{0x49,0xFF,0xDB},{0xDB,0xFF,0xFF},{0x6D,0xFF,0x00},{0x00,0xFF,0x00},{0x6D,0xFF,0xDB},
		{0x92,0xFF,0x6D},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0x00,0xFF,0xDB},{0x6D,0xFF,0x00},{0xB6,0xFF,0xB6},{0x00,0xFF,0xDB},{0xB6,0xFF,0xFF},{0xFF,0xFF,0x00},{0x6D,0xFF,0x6D},{0x24,0xFF,0x00},{0x00,0xFF,0xFF},{0x00,0xFF,0x00},{0xDB,0xFF,0x00},{0xFF,0xFF,0xFF},
		{0xDB,0xFF,0x6D},{0x24,0xFF,0x24},{0x00,0xFF,0x00},{0xDB,0xFF,0x00},{0x00,0xFF,0x49},{0x00,0xFF,0x92},{0xFF,0xFF,0x92},{0x24,0xFF,0x00},{0x00,0xFF,0x00},{0x00,0xFF,0xFF},{0x92,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xB6},{0xB6,0xFF,0x6D},{0x00,0xFF,0x24},{0x92,0xFF,0x92}
	},
	{	// yellow
		{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x49},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x92},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},
		{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x49},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xDB},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xDB},
		{0xFF,0xFF,0x6D},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x00},{0xFF,0xFF,0xB6},{0xFF,0xFF,0xDB},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0x6D},{0xFF,0xFF,0x24},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x49},{0xFF,0xFF,0x92},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xB6},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x24},{0xFF,0xFF,0x92}
	},
	{	// blue
		{0x00,0x00,0xFF},{0xFF,0xB6,0xFF},{0x92,0x6D,0xFF},{0xB6,0xFF,0xFF},{0x92,0xFF,0xFF},{0xFF,0x6D,0xFF},{0x00,0x92,0xFF},{0xB6,0xDB,0xFF},{0xFF,0x00,0xFF},{0x92,0x00,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x92,0xFF},{0xFF,0xFF,0xFF},{0xDB,0x6D,0xFF},{0x92,0xDB,0xFF},{0x00,0x92,0xFF},
		{0x00,0x49,0xFF},{0x6D,0xB6,0xFF},{0xB6,0x24,0xFF},{0xDB,0xDB,0xFF},{0x00,0xB6,0xFF},{0x6D,0xDB,0xFF},{0x49,0x00,0xFF},{0x92,0x92,0xFF},{0x49,0x49,0xFF},{0xFF,0x00,0xFF},{0x00,0x00,0xFF},{0x49,0xFF,0xFF},{0xDB,0xB6,0xFF},{0x6D,0x49,0xFF},{0x00,0x00,0xFF},{0x6D,0x49,0xFF},
		{0x92,0x00,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x92,0xFF},{0xFF,0xB6,0xFF},{0x00,0x6D,0xFF},{0x6D,0x24,0xFF},{0xB6,0xB6,0xFF},{0x00,0x00,0xFF},{0xB6,0x00,0xFF},{0xFF,0xDB,0xFF},{0x6D,0x6D,0xFF},{0x24,0x49,0xFF},{0x00,0x49,0xFF},{0x00,0x00,0xFF},{0xDB,0xDB,0xFF},{0xFF,0xFF,0xFF},
		{0xDB,0xB6,0xFF},{0x24,0x24,0xFF},{0x00,0xFF,0xFF},{0xDB,0x6D,0xFF},{0x00,0x49,0xFF},{0x00,0x24,0xFF},{0xFF,0x00,0xFF},{0x24,0x92,0xFF},{0x00,0x00,0xFF},{0x00,0xFF,0xFF},{0x92,0x49,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xB6,0xFF},{0xB6,0x00,0xFF},{0x00,0x6D,0xFF},{0x92,0x92,0xFF}
	},
	{	// magenta
		{0xFF,0x00,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x6D,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x92,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x92,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x6D,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x92,0xFF},
		{0xFF,0x49,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x24,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x00,0xFF},{0xFF,0x92,0xFF},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0x49,0xFF},
		{0xFF,0x00,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x92,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x24,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x49,0xFF},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xB6,0xFF},{0xFF,0x24,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x49,0xFF},{0xFF,0x24,0xFF},{0xFF,0x00,0xFF},{0xFF,0x92,0xFF},{0xFF,0x00,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x49,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x00,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x92,0xFF}
	},
	{	// cyan
		{0x00,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x92,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x92,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xFF},{0xB6,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x92,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x92,0xFF,0xFF},{0x00,0xFF,0xFF},
		{0x00,0xFF,0xFF},{0x6D,0xFF,0xFF},{0xB6,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x00,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x49,0xFF,0xFF},{0x92,0xFF,0xFF},{0x49,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xFF},{0x49,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x00,0xFF,0xFF},{0x6D,0xFF,0xFF},
		{0x92,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xFF},{0x6D,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x00,0xFF,0xFF},{0xB6,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x24,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0xDB,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xDB,0xFF,0xFF},{0x24,0xFF,0xFF},{0x00,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x24,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x92,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x00,0xFF,0xFF},{0x92,0xFF,0xFF}
	},
	{	// white
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF}
	}
};
static const unsigned char Palette_VS_0003[8][64][3] =
{
	{	// none
		{0xB6,0x00,0xFF},{0xFF,0x6D,0xFF},{0x92,0xFF,0x6D},{0xB6,0xB6,0xB6},{0x00,0x92,0x00},{0xFF,0xFF,0xFF},{0xB6,0xDB,0xFF},{0x24,0x49,0x00},{0x00,0x24,0x92},{0x00,0x00,0x00},{0xFF,0xDB,0x92},{0x6D,0x49,0x00},{0xFF,0x00,0x92},{0xDB,0xDB,0xDB},{0xDB,0xB6,0x6D},{0x92,0xDB,0xFF},
		{0x92,0x92,0xFF},{0x00,0x92,0x92},{0xB6,0x00,0x6D},{0x00,0x49,0xFF},{0x24,0x92,0x00},{0x92,0x6D,0x00},{0xDB,0x6D,0x00},{0x00,0xB6,0x6D},{0x6D,0x6D,0x6D},{0x6D,0x49,0xDB},{0x00,0x00,0x00},{0x00,0x00,0xDB},{0xFF,0x00,0x00},{0xB6,0x24,0x00},{0xFF,0x92,0xFF},{0xFF,0xB6,0xB6},
		{0xDB,0x6D,0xFF},{0x00,0x49,0x00},{0x00,0x00,0x6D},{0xFF,0xFF,0x00},{0x24,0x24,0x24},{0xFF,0xB6,0x00},{0xFF,0x92,0x00},{0xFF,0xFF,0xFF},{0x6D,0xDB,0x00},{0x92,0x00,0x6D},{0x6D,0xB6,0xFF},{0xFF,0x00,0xFF},{0x00,0x6D,0xDB},{0x92,0x92,0x92},{0x00,0x00,0x00},{0x6D,0x24,0x00},
		{0x00,0xFF,0xFF},{0x49,0x00,0x00},{0xB6,0xFF,0x49},{0xFF,0xB6,0xFF},{0x92,0x49,0x00},{0x00,0xFF,0x00},{0xDB,0xDB,0x00},{0x49,0x49,0x49},{0x00,0x6D,0x24},{0x00,0x00,0x00},{0xDB,0xB6,0xFF},{0xFF,0xFF,0x6D},{0x92,0x00,0xFF},{0x49,0xFF,0xDB},{0xFF,0xDB,0x00},{0x00,0x49,0x49}
	},
	{	// red
		{0xFF,0x00,0xFF},{0xFF,0x6D,0xFF},{0xFF,0xFF,0x6D},{0xFF,0xB6,0xB6},{0xFF,0x92,0x00},{0xFF,0xFF,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x49,0x00},{0xFF,0x24,0x92},{0xFF,0x00,0x00},{0xFF,0xDB,0x92},{0xFF,0x49,0x00},{0xFF,0x00,0x92},{0xFF,0xDB,0xDB},{0xFF,0xB6,0x6D},{0xFF,0xDB,0xFF},
		{0xFF,0x92,0xFF},{0xFF,0x92,0x92},{0xFF,0x00,0x6D},{0xFF,0x49,0xFF},{0xFF,0x92,0x00},{0xFF,0x6D,0x00},{0xFF,0x6D,0x00},{0xFF,0xB6,0x6D},{0xFF,0x6D,0x6D},{0xFF,0x49,0xDB},{0xFF,0x00,0x00},{0xFF,0x00,0xDB},{0xFF,0x00,0x00},{0xFF,0x24,0x00},{0xFF,0x92,0xFF},{0xFF,0xB6,0xB6},
		{0xFF,0x6D,0xFF},{0xFF,0x49,0x00},{0xFF,0x00,0x6D},{0xFF,0xFF,0x00},{0xFF,0x24,0x24},{0xFF,0xB6,0x00},{0xFF,0x92,0x00},{0xFF,0xFF,0xFF},{0xFF,0xDB,0x00},{0xFF,0x00,0x6D},{0xFF,0xB6,0xFF},{0xFF,0x00,0xFF},{0xFF,0x6D,0xDB},{0xFF,0x92,0x92},{0xFF,0x00,0x00},{0xFF,0x24,0x00},
		{0xFF,0xFF,0xFF},{0xFF,0x00,0x00},{0xFF,0xFF,0x49},{0xFF,0xB6,0xFF},{0xFF,0x49,0x00},{0xFF,0xFF,0x00},{0xFF,0xDB,0x00},{0xFF,0x49,0x49},{0xFF,0x6D,0x24},{0xFF,0x00,0x00},{0xFF,0xB6,0xFF},{0xFF,0xFF,0x6D},{0xFF,0x00,0xFF},{0xFF,0xFF,0xDB},{0xFF,0xDB,0x00},{0xFF,0x49,0x49}
	},
	{	// green
		{0xB6,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x92,0xFF,0x6D},{0xB6,0xFF,0xB6},{0x00,0xFF,0x00},{0xFF,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x24,0xFF,0x00},{0x00,0xFF,0x92},{0x00,0xFF,0x00},{0xFF,0xFF,0x92},{0x6D,0xFF,0x00},{0xFF,0xFF,0x92},{0xDB,0xFF,0xDB},{0xDB,0xFF,0x6D},{0x92,0xFF,0xFF},
		{0x92,0xFF,0xFF},{0x00,0xFF,0x92},{0xB6,0xFF,0x6D},{0x00,0xFF,0xFF},{0x24,0xFF,0x00},{0x92,0xFF,0x00},{0xDB,0xFF,0x00},{0x00,0xFF,0x6D},{0x6D,0xFF,0x6D},{0x6D,0xFF,0xDB},{0x00,0xFF,0x00},{0x00,0xFF,0xDB},{0xFF,0xFF,0x00},{0xB6,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xB6},
		{0xDB,0xFF,0xFF},{0x00,0xFF,0x00},{0x00,0xFF,0x6D},{0xFF,0xFF,0x00},{0x24,0xFF,0x24},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0x6D,0xFF,0x00},{0x92,0xFF,0x6D},{0x6D,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xDB},{0x92,0xFF,0x92},{0x00,0xFF,0x00},{0x6D,0xFF,0x00},
		{0x00,0xFF,0xFF},{0x49,0xFF,0x00},{0xB6,0xFF,0x49},{0xFF,0xFF,0xFF},{0x92,0xFF,0x00},{0x00,0xFF,0x00},{0xDB,0xFF,0x00},{0x49,0xFF,0x49},{0x00,0xFF,0x24},{0x00,0xFF,0x00},{0xDB,0xFF,0xFF},{0xFF,0xFF,0x6D},{0x92,0xFF,0xFF},{0x49,0xFF,0xDB},{0xFF,0xFF,0x00},{0x00,0xFF,0x49}
	},
	{	// yellow
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xB6},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0xFF,0xFF,0x92},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0x92},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x00},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xB6},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x00},{0xFF,0xFF,0x24},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x49},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x49},{0xFF,0xFF,0x24},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x00},{0xFF,0xFF,0x49}
	},
	{	// blue
		{0xB6,0x00,0xFF},{0xFF,0x6D,0xFF},{0x92,0xFF,0xFF},{0xB6,0xB6,0xFF},{0x00,0x92,0xFF},{0xFF,0xFF,0xFF},{0xB6,0xDB,0xFF},{0x24,0x49,0xFF},{0x00,0x24,0xFF},{0x00,0x00,0xFF},{0xFF,0xDB,0xFF},{0x6D,0x49,0xFF},{0xFF,0x00,0xFF},{0xDB,0xDB,0xFF},{0xDB,0xB6,0xFF},{0x92,0xDB,0xFF},
		{0x92,0x92,0xFF},{0x00,0x92,0xFF},{0xB6,0x00,0xFF},{0x00,0x49,0xFF},{0x24,0x92,0xFF},{0x92,0x6D,0xFF},{0xDB,0x6D,0xFF},{0x00,0xB6,0xFF},{0x6D,0x6D,0xFF},{0x6D,0x49,0xFF},{0x00,0x00,0xFF},{0x00,0x00,0xFF},{0xFF,0x00,0xFF},{0xB6,0x24,0xFF},{0xFF,0x92,0xFF},{0xFF,0xB6,0xFF},
		{0xDB,0x6D,0xFF},{0x00,0x49,0xFF},{0x00,0x00,0xFF},{0xFF,0xFF,0xFF},{0x24,0x24,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x92,0xFF},{0xFF,0xFF,0xFF},{0x6D,0xDB,0xFF},{0x92,0x00,0xFF},{0x6D,0xB6,0xFF},{0xFF,0x00,0xFF},{0x00,0x6D,0xFF},{0x92,0x92,0xFF},{0x00,0x00,0xFF},{0x6D,0x24,0xFF},
		{0x00,0xFF,0xFF},{0x49,0x00,0xFF},{0xB6,0xFF,0xFF},{0xFF,0xB6,0xFF},{0x92,0x49,0xFF},{0x00,0xFF,0xFF},{0xDB,0xDB,0xFF},{0x49,0x49,0xFF},{0x00,0x6D,0xFF},{0x00,0x00,0xFF},{0xDB,0xB6,0xFF},{0xFF,0xFF,0xFF},{0x92,0x00,0xFF},{0x49,0xFF,0xFF},{0xFF,0xDB,0xFF},{0x00,0x49,0xFF}
	},
	{	// magenta
		{0xFF,0x00,0xFF},{0xFF,0x6D,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x92,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x49,0xFF},{0xFF,0x24,0xFF},{0xFF,0x00,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xDB,0xFF},
		{0xFF,0x92,0xFF},{0xFF,0x92,0xFF},{0xFF,0x00,0xFF},{0xFF,0x49,0xFF},{0xFF,0x92,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x6D,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x24,0xFF},{0xFF,0x92,0xFF},{0xFF,0xB6,0xFF},
		{0xFF,0x6D,0xFF},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x24,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x92,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x00,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x00,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x92,0xFF},{0xFF,0x00,0xFF},{0xFF,0x24,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0x00,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x49,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x49,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x00,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x00,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x49,0xFF}
	},
	{	// cyan
		{0xB6,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x92,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x00,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x24,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x6D,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xDB,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x92,0xFF,0xFF},
		{0x92,0xFF,0xFF},{0x00,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x00,0xFF,0xFF},{0x24,0xFF,0xFF},{0x92,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x00,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xB6,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xDB,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x24,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x92,0xFF,0xFF},{0x6D,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xFF},{0x92,0xFF,0xFF},{0x00,0xFF,0xFF},{0x6D,0xFF,0xFF},
		{0x00,0xFF,0xFF},{0x49,0xFF,0xFF},{0xB6,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x92,0xFF,0xFF},{0x00,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x49,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0xDB,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x92,0xFF,0xFF},{0x49,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xFF}
	},
	{	// white
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF}
	}
};
static const unsigned char Palette_VS_0004[8][64][3] =
{
	{	// none
		{0x92,0x6D,0x00},{0x6D,0x49,0xDB},{0x00,0x92,0x92},{0xDB,0xDB,0x00},{0x00,0x00,0x00},{0xFF,0xB6,0xB6},{0x00,0x24,0x92},{0xDB,0x6D,0x00},{0xB6,0xB6,0xB6},{0x6D,0x24,0x00},{0x00,0xFF,0x00},{0x00,0x00,0x6D},{0xFF,0xDB,0x92},{0xFF,0xFF,0x00},{0x00,0x92,0x00},{0xB6,0xFF,0x49},
		{0xFF,0x6D,0xFF},{0x49,0x00,0x00},{0x00,0x49,0xFF},{0xFF,0x92,0xFF},{0x00,0x00,0x00},{0x49,0x49,0x49},{0xB6,0x24,0x00},{0xFF,0x92,0x00},{0xDB,0xB6,0x6D},{0x00,0xB6,0x6D},{0x92,0x92,0xFF},{0x24,0x92,0x00},{0x92,0x00,0x6D},{0x00,0x00,0x00},{0x92,0xFF,0x6D},{0x6D,0xB6,0xFF},
		{0xB6,0x00,0x6D},{0x00,0x6D,0x24},{0x92,0x49,0x00},{0x00,0x00,0xDB},{0x92,0x00,0xFF},{0xB6,0x00,0xFF},{0x6D,0x6D,0x6D},{0xFF,0x00,0x92},{0x00,0x49,0x49},{0xDB,0xDB,0xDB},{0x00,0x6D,0xDB},{0x00,0x49,0x00},{0x24,0x24,0x24},{0xFF,0xFF,0x6D},{0x92,0x92,0x92},{0xFF,0x00,0xFF},
		{0xFF,0xB6,0xFF},{0xFF,0xFF,0xFF},{0x6D,0x49,0x00},{0xFF,0x00,0x00},{0xFF,0xDB,0x00},{0x49,0xFF,0xDB},{0xFF,0xFF,0xFF},{0x92,0xDB,0xFF},{0x00,0x00,0x00},{0xFF,0xB6,0x00},{0xDB,0x6D,0xFF},{0xB6,0xDB,0xFF},{0x6D,0xDB,0x00},{0xDB,0xB6,0xFF},{0x00,0xFF,0xFF},{0x24,0x49,0x00}
	},
	{	// red
		{0xFF,0x6D,0x00},{0xFF,0x49,0xDB},{0xFF,0x92,0x92},{0xFF,0xDB,0x00},{0xFF,0x00,0x00},{0xFF,0xB6,0xB6},{0xFF,0x24,0x92},{0xFF,0x6D,0x00},{0xFF,0xB6,0xB6},{0xFF,0x24,0x00},{0xFF,0xFF,0x00},{0xFF,0x00,0x6D},{0xFF,0xDB,0x92},{0xFF,0xFF,0x00},{0xFF,0x92,0x00},{0xFF,0xFF,0x49},
		{0xFF,0x6D,0xFF},{0xFF,0x00,0x00},{0xFF,0x49,0xFF},{0xFF,0x92,0xFF},{0xFF,0x00,0x00},{0xFF,0x49,0x49},{0xFF,0x24,0x00},{0xFF,0x92,0x00},{0xFF,0xB6,0x6D},{0xFF,0xB6,0x6D},{0xFF,0x92,0xFF},{0xFF,0x92,0x00},{0xFF,0x00,0x6D},{0xFF,0x00,0x00},{0xFF,0xFF,0x6D},{0xFF,0xB6,0xFF},
		{0xFF,0x00,0x6D},{0xFF,0x6D,0x24},{0xFF,0x49,0x00},{0xFF,0x00,0xDB},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x6D,0x6D},{0xFF,0x00,0x92},{0xFF,0x49,0x49},{0xFF,0xDB,0xDB},{0xFF,0x6D,0xDB},{0xFF,0x49,0x00},{0xFF,0x24,0x24},{0xFF,0xFF,0x6D},{0xFF,0x92,0x92},{0xFF,0x00,0xFF},
		{0xFF,0xB6,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x49,0x00},{0xFF,0x00,0x00},{0xFF,0xDB,0x00},{0xFF,0xFF,0xDB},{0xFF,0xFF,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x00,0x00},{0xFF,0xB6,0x00},{0xFF,0x6D,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xDB,0x00},{0xFF,0xB6,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x49,0x00}
	},
	{	// green
		{0x92,0xFF,0x00},{0x6D,0xFF,0xDB},{0x00,0xFF,0x92},{0xDB,0xFF,0x00},{0x00,0xFF,0x00},{0xFF,0xFF,0xB6},{0x00,0xFF,0x92},{0xDB,0xFF,0x00},{0xB6,0xFF,0xB6},{0x6D,0xFF,0x00},{0x00,0xFF,0x00},{0x00,0xFF,0x6D},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0x00,0xFF,0x00},{0xB6,0xFF,0x49},
		{0xFF,0xFF,0xFF},{0x49,0xFF,0x00},{0x00,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0x00},{0x49,0xFF,0x49},{0xB6,0xFF,0x00},{0xFF,0xFF,0x00},{0xDB,0xFF,0x6D},{0x00,0xFF,0x6D},{0x92,0xFF,0xFF},{0x24,0xFF,0x00},{0x92,0xFF,0x6D},{0x00,0xFF,0x00},{0x92,0xFF,0x6D},{0x6D,0xFF,0xFF},
		{0xB6,0xFF,0x6D},{0x00,0xFF,0x24},{0x92,0xFF,0x00},{0x00,0xFF,0xDB},{0x92,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x6D,0xFF,0x6D},{0xFF,0xFF,0x92},{0x00,0xFF,0x49},{0xDB,0xFF,0xDB},{0x00,0xFF,0xDB},{0x00,0xFF,0x00},{0x24,0xFF,0x24},{0xFF,0xFF,0x6D},{0x92,0xFF,0x92},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x6D,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0x49,0xFF,0xDB},{0xFF,0xFF,0xFF},{0x92,0xFF,0xFF},{0x00,0xFF,0x00},{0xFF,0xFF,0x00},{0xDB,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x6D,0xFF,0x00},{0xDB,0xFF,0xFF},{0x00,0xFF,0xFF},{0x24,0xFF,0x00}
	},
	{	// yellow
		{0xFF,0xFF,0x00},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xB6},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0xFF,0xFF,0xB6},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x92},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x49},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x49},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x00},{0xFF,0xFF,0x6D},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0x6D},{0xFF,0xFF,0x24},{0xFF,0xFF,0x00},{0xFF,0xFF,0xDB},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x92},{0xFF,0xFF,0x49},{0xFF,0xFF,0xDB},{0xFF,0xFF,0xDB},{0xFF,0xFF,0x00},{0xFF,0xFF,0x24},{0xFF,0xFF,0x6D},{0xFF,0xFF,0x92},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xDB},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0x00}
	},
	{	// blue
		{0x92,0x6D,0xFF},{0x6D,0x49,0xFF},{0x00,0x92,0xFF},{0xDB,0xDB,0xFF},{0x00,0x00,0xFF},{0xFF,0xB6,0xFF},{0x00,0x24,0xFF},{0xDB,0x6D,0xFF},{0xB6,0xB6,0xFF},{0x6D,0x24,0xFF},{0x00,0xFF,0xFF},{0x00,0x00,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xFF,0xFF},{0x00,0x92,0xFF},{0xB6,0xFF,0xFF},
		{0xFF,0x6D,0xFF},{0x49,0x00,0xFF},{0x00,0x49,0xFF},{0xFF,0x92,0xFF},{0x00,0x00,0xFF},{0x49,0x49,0xFF},{0xB6,0x24,0xFF},{0xFF,0x92,0xFF},{0xDB,0xB6,0xFF},{0x00,0xB6,0xFF},{0x92,0x92,0xFF},{0x24,0x92,0xFF},{0x92,0x00,0xFF},{0x00,0x00,0xFF},{0x92,0xFF,0xFF},{0x6D,0xB6,0xFF},
		{0xB6,0x00,0xFF},{0x00,0x6D,0xFF},{0x92,0x49,0xFF},{0x00,0x00,0xFF},{0x92,0x00,0xFF},{0xB6,0x00,0xFF},{0x6D,0x6D,0xFF},{0xFF,0x00,0xFF},{0x00,0x49,0xFF},{0xDB,0xDB,0xFF},{0x00,0x6D,0xFF},{0x00,0x49,0xFF},{0x24,0x24,0xFF},{0xFF,0xFF,0xFF},{0x92,0x92,0xFF},{0xFF,0x00,0xFF},
		{0xFF,0xB6,0xFF},{0xFF,0xFF,0xFF},{0x6D,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0xDB,0xFF},{0x49,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x92,0xDB,0xFF},{0x00,0x00,0xFF},{0xFF,0xB6,0xFF},{0xDB,0x6D,0xFF},{0xB6,0xDB,0xFF},{0x6D,0xDB,0xFF},{0xDB,0xB6,0xFF},{0x00,0xFF,0xFF},{0x24,0x49,0xFF}
	},
	{	// magenta
		{0xFF,0x6D,0xFF},{0xFF,0x49,0xFF},{0xFF,0x92,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x00,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x24,0xFF},{0xFF,0x6D,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x24,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x00,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x92,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0x6D,0xFF},{0xFF,0x00,0xFF},{0xFF,0x49,0xFF},{0xFF,0x92,0xFF},{0xFF,0x00,0xFF},{0xFF,0x49,0xFF},{0xFF,0x24,0xFF},{0xFF,0x92,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x92,0xFF},{0xFF,0x92,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xB6,0xFF},
		{0xFF,0x00,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x00,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x00,0xFF},{0xFF,0x49,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x6D,0xFF},{0xFF,0x49,0xFF},{0xFF,0x24,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x92,0xFF},{0xFF,0x00,0xFF},
		{0xFF,0xB6,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x49,0xFF},{0xFF,0x00,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xDB,0xFF},{0xFF,0x00,0xFF},{0xFF,0xB6,0xFF},{0xFF,0x6D,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xDB,0xFF},{0xFF,0xB6,0xFF},{0xFF,0xFF,0xFF},{0xFF,0x49,0xFF}
	},
	{	// cyan
		{0x92,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x00,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x00,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xFF},{0xDB,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x6D,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xFF},{0xB6,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0x49,0xFF,0xFF},{0x00,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xFF},{0x49,0xFF,0xFF},{0xB6,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x00,0xFF,0xFF},{0x92,0xFF,0xFF},{0x24,0xFF,0xFF},{0x92,0xFF,0xFF},{0x00,0xFF,0xFF},{0x92,0xFF,0xFF},{0x6D,0xFF,0xFF},
		{0xB6,0xFF,0xFF},{0x00,0xFF,0xFF},{0x92,0xFF,0xFF},{0x00,0xFF,0xFF},{0x92,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x6D,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x00,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x00,0xFF,0xFF},{0x00,0xFF,0xFF},{0x24,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x92,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x6D,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x49,0xFF,0xFF},{0xFF,0xFF,0xFF},{0x92,0xFF,0xFF},{0x00,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xDB,0xFF,0xFF},{0xB6,0xFF,0xFF},{0x6D,0xFF,0xFF},{0xDB,0xFF,0xFF},{0x00,0xFF,0xFF},{0x24,0xFF,0xFF}
	},
	{	// white
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF},{0xFF,0xFF,0xFF}
	}
};

// Colour Emphasis coefficients for imported palettes
static	const double Emphasis[8][3] =
{
	{1.00,1.00,1.00},	// black
	{1.00,0.85,0.85},	// red
	{0.85,1.00,0.85},	// green
	{0.85,0.85,0.70},	// yellow
	{0.85,0.85,1.00},	// blue
	{0.85,0.70,0.85},	// magenta
	{0.70,0.85,0.85},	// cyan
	{0.70,0.70,0.70}	// white
};

#define CLIP(x,min,max) (((x) > (max)) ? (max) : (((x) < (min)) ? (min) : (x)))

static	int	getPhase (double *wave)
{
	double max = -999, min = 999;
	double amp, offset;
	double angle = 0, base;
	int i, j, k;
	for (i = 0; i < 12; i++)
	{
		if (wave[i] > max)
			max = wave[i];
		if (wave[i] < min)
			min = wave[i];
	}
	amp = (max - min) / 2;
	offset = (max + min) / 2;

	for (k = 0; k < 3; k++)
	{
		double error[12], curerror = 0;
		double segsize = 360;
		for (i = 0; i <= k; i++)
			segsize /= 12.0;

		for (j = 0; j < 12; j++)
		{
			error[j] = 0;
			for (i = 0; i < 12; i++)
				error[j] += fabs((amp * sin((i * 30 + j * segsize + angle) * M_PI / 180.0) + offset) - wave[i]);
			curerror += error[j];
		}
		base = 0;
		for (j = 0; j < 12; j++)
		{
			if (error[j] < curerror)
			{
				base = j * segsize;
				curerror = error[j];
			}
		}
		angle += base;
	}

	return (int)angle;
}

static	void	GenerateNTSC (int hue, int sat)
{
	const double black = 0.519;
	const double white = 1.443;
	const double voltage[2][4] = {
		{1.094,1.506,1.962,1.962},
		{0.350,0.519,0.962,1.550}
	};

	const char phases[12][12] = {
		{1,1,1,1,1,1,0,0,0,0,0,0},
		{1,1,1,1,1,0,0,0,0,0,0,1},	// blue
		{1,1,1,1,0,0,0,0,0,0,1,1},
		{1,1,1,0,0,0,0,0,0,1,1,1},	// magenta
		{1,1,0,0,0,0,0,0,1,1,1,1},
		{1,0,0,0,0,0,0,1,1,1,1,1},	// red
		{0,0,0,0,0,0,1,1,1,1,1,1},
		{0,0,0,0,0,1,1,1,1,1,1,0},	// yellow
		{0,0,0,0,1,1,1,1,1,1,0,0},
		{0,0,0,1,1,1,1,1,1,0,0,0},	// green
		{0,0,1,1,1,1,1,1,0,0,0,0},
		{0,1,1,1,1,1,1,0,0,0,0,0},	// cyan
	};
	const char emphasis[8][12] = {
		{0,0,0,0,0,0,0,0,0,0,0,0},	// none
		{0,1,1,1,1,1,1,0,0,0,0,0},	// red
		{1,1,1,0,0,0,0,0,0,1,1,1},	// green
		{1,1,1,1,1,1,1,0,0,1,1,1},	// yellow
		{0,0,0,0,0,1,1,1,1,1,1,0},	// blue
		{0,1,1,1,1,1,1,1,1,1,1,0},	// magenta
		{1,1,1,0,0,1,1,1,1,1,1,1},	// cyan
		{1,1,1,1,1,1,1,1,1,1,1,1}	// all
	};

	int i, x, y, z;
	for (x = 0; x < 8; x++) 
	{
		for (y = 0; y < 4; y++)
		{
			for (z = 0; z < 16; z++)
			{
				double wave[12];
				double Y, I, Q;
				double R, G, B;

				double H = 0, S = 0;

				for (i = 0; i < 12; i++)
				{
					if (z == 0)
						wave[i] = voltage[0][y];
					else if (z < 13)
						wave[i] = phases[z-1][i] ? voltage[0][y] : voltage[1][y];
					else if (z == 13)
						wave[i] = voltage[1][y];
					else	wave[i] = black;
					if ((emphasis[x][i]) && (z < 14))
						wave[i] = wave[i] * 0.75;
				}

				Y = 0.0; S = 0;
				for (i = 0; i < 12; i++)
					Y += wave[i] / 12.0;
				for (i = 0; i < 12; i++)
					S += (wave[i] - Y) * (wave[i] - Y);
				Y = (Y - black) / white;
				S = S / white;	// don't remove black offset, since this is already relative
				S = sqrt(S / 12.0) * sat / 50.0;

				H = M_PI * (270 + getPhase(wave) + hue) / 180.0;

				I = S * sin(H);
				Q = S * cos(H);

				R = Y + 0.956 * I + 0.621 * Q;
				G = Y - 0.272 * I - 0.647 * Q;
				B = Y - 1.107 * I + 1.705 * Q;

				R *= 256;
				G *= 256;
				B *= 256;

				RawPalette[x][(y << 4) | z][0] = (unsigned char)CLIP(R, 0, 255);
				RawPalette[x][(y << 4) | z][1] = (unsigned char)CLIP(G, 0, 255);
				RawPalette[x][(y << 4) | z][2] = (unsigned char)CLIP(B, 0, 255);
			}
		}
	}
}

static	void	GeneratePAL (int sat)
{
	memcpy(RawPalette, Palette_PAL, sizeof(RawPalette));
	// TODO - implement
}

static	void	GenerateRGB (int pal)
{
	if (pal == PALETTE_PC10)
		memcpy(RawPalette, Palette_PC10, sizeof(RawPalette));
	else if (pal == PALETTE_VS1)
		memcpy(RawPalette, Palette_VS_0001, sizeof(RawPalette));
	else if (pal == PALETTE_VS2)
		memcpy(RawPalette, Palette_VS_0002, sizeof(RawPalette));
	else if (pal == PALETTE_VS3)
		memcpy(RawPalette, Palette_VS_0003, sizeof(RawPalette));
	else if (pal == PALETTE_VS4)
		memcpy(RawPalette, Palette_VS_0004, sizeof(RawPalette));
	else	MessageBox(hMainWnd, _T("Illegal palette selected!"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
}

static	BOOL	ImportPalette (TCHAR *filename, BOOL load)
{
	int i, j;
	FILE *pal;
	if (!_tcslen(filename))
		return FALSE;
	pal = _tfopen(filename, _T("rb"));
	if (!pal)
		return FALSE;
	fseek(pal, 0, SEEK_END);
	if (ftell(pal) < 0xC0)
	{	// too small
		fclose(pal);
		return FALSE;
	}
	if (!load)
	{
		fclose(pal);
		return TRUE;
	}
	if (ftell(pal) >= 0x600)
	{
		fseek(pal, 0, SEEK_SET);
		for (j = 0; j < 8; j++)
		{
			for (i = 0; i < 64; i++)
			{
				fread(&RawPalette[j][i][0], 1, 1, pal);
				fread(&RawPalette[j][i][1], 1, 1, pal);
				fread(&RawPalette[j][i][2], 1, 1, pal);
			}
		}
	}
	else
	{
		fseek(pal, 0, SEEK_SET);
		for (i = 0; i < 64; i++)
		{
			fread(&RawPalette[0][i][0], 1, 1, pal);
			fread(&RawPalette[0][i][1], 1, 1, pal);
			fread(&RawPalette[0][i][2], 1, 1, pal);
			for (j = 1; j < 8; j++)
			{
				RawPalette[j][i][0] = (unsigned char)CLIP(RawPalette[0][i][0] * Emphasis[j][0], 0, 255);
				RawPalette[j][i][1] = (unsigned char)CLIP(RawPalette[0][i][1] * Emphasis[j][1], 0, 255);
				RawPalette[j][i][2] = (unsigned char)CLIP(RawPalette[0][i][2] * Emphasis[j][2], 0, 255);
			}
		}
	}
	fclose(pal);
	return TRUE;
}

void	LoadPalette (int PalNum)
{
	unsigned int RV, GV, BV;
	int i;
	if (PalNum == PALETTE_NTSC)
		GenerateNTSC(NTSChue, NTSCsat);
	else if (PalNum == PALETTE_PAL)
		GeneratePAL(PALsat);
	else if (PalNum == PALETTE_EXT)
	{
		if (!ImportPalette(PPU::IsPAL ? CustPalettePAL : CustPaletteNTSC, TRUE))
		{
			MessageBox(hMainWnd, _T("Unable to load the specified palette! Reverting to default!"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
			if (PPU::IsPAL)
				PalettePAL = PalNum = PALETTE_PAL;
			else	PaletteNTSC = PalNum = PALETTE_NTSC;
		}
	}
	else	GenerateRGB(PalNum);

	for (i = 0; i < 0x200; i++)
	{
		RV = RawPalette[i >> 6][i & 0x3F][0];
		GV = RawPalette[i >> 6][i & 0x3F][1];
		BV = RawPalette[i >> 6][i & 0x3F][2];

		Palette15[i] = (unsigned short)(((RV << 7) & 0x7C00) | ((GV << 2) & 0x03E0) | (BV >> 3));
		Palette16[i] = (unsigned short)(((RV << 8) & 0xF800) | ((GV << 3) & 0x07E0) | (BV >> 3));
		Palette32[i] = (RV << 16) | (GV << 8) | BV;
	}
	// redraw the screen with the new palette, but only if emulation isn't active
	if (!NES::Running)
		Update();
}
#undef CLIP

static int hue, nsat, psat;
static TCHAR extfn[MAX_PATH];

void	UpdatePalette (HWND hDlg, int pal)
{
	if (pal == PALETTE_NTSC)
	{
		EnableWindow(GetDlgItem(hDlg, IDC_PAL_HUESLIDER), TRUE);
		EnableWindow(GetDlgItem(hDlg, IDC_PAL_HUE), TRUE);
		EnableWindow(GetDlgItem(hDlg, IDC_PAL_SATSLIDER), TRUE);
		EnableWindow(GetDlgItem(hDlg, IDC_PAL_SAT), TRUE);

		SendDlgItemMessage(hDlg, IDC_PAL_HUESLIDER, TBM_SETPOS, TRUE, hue);
		SetDlgItemInt(hDlg, IDC_PAL_HUE, hue, TRUE);
		SendDlgItemMessage(hDlg, IDC_PAL_SATSLIDER, TBM_SETPOS, TRUE, nsat);
		SetDlgItemInt(hDlg, IDC_PAL_SAT, nsat, FALSE);
	}
	else if (pal == PALETTE_PAL)
	{
		EnableWindow(GetDlgItem(hDlg, IDC_PAL_HUESLIDER), FALSE);
		EnableWindow(GetDlgItem(hDlg, IDC_PAL_HUE), FALSE);
		EnableWindow(GetDlgItem(hDlg, IDC_PAL_SATSLIDER), TRUE);
		EnableWindow(GetDlgItem(hDlg, IDC_PAL_SAT), TRUE);

		SendDlgItemMessage(hDlg, IDC_PAL_HUESLIDER, TBM_SETPOS, TRUE, -15);
		SetDlgItemInt(hDlg, IDC_PAL_HUE, (UINT)-15, TRUE);
		SendDlgItemMessage(hDlg, IDC_PAL_SATSLIDER, TBM_SETPOS, TRUE, psat);
		SetDlgItemInt(hDlg, IDC_PAL_SAT, psat, FALSE);
	}
	else
	{
		EnableWindow(GetDlgItem(hDlg, IDC_PAL_HUESLIDER), FALSE);
		EnableWindow(GetDlgItem(hDlg, IDC_PAL_HUE), FALSE);
		EnableWindow(GetDlgItem(hDlg, IDC_PAL_SATSLIDER), FALSE);
		EnableWindow(GetDlgItem(hDlg, IDC_PAL_SAT), FALSE);

		SendDlgItemMessage(hDlg, IDC_PAL_HUESLIDER, TBM_SETPOS, TRUE, 0);
		SetDlgItemText(hDlg, IDC_PAL_HUE, _T("N/A"));
		SendDlgItemMessage(hDlg, IDC_PAL_SATSLIDER, TBM_SETPOS, TRUE, 50);
		SetDlgItemText(hDlg, IDC_PAL_SAT, _T("N/A"));
	}

	if (ImportPalette(extfn, FALSE))
	{
		EnableWindow(GetDlgItem(hDlg, IDC_PAL_EXT), TRUE);
		if (pal == PALETTE_EXT)
			ImportPalette(extfn, TRUE);
	}
	else	EnableWindow(GetDlgItem(hDlg, IDC_PAL_EXT), FALSE);

	RedrawWindow(hDlg, NULL, NULL, RDW_INVALIDATE);
}

INT_PTR	CALLBACK	PaletteConfigProc (HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	const int paltable[PALETTE_MAX] = {IDC_PAL_NTSC,IDC_PAL_PAL,IDC_PAL_PC10,IDC_PAL_VS1,IDC_PAL_VS2,IDC_PAL_VS3,IDC_PAL_VS4,IDC_PAL_EXT};
	const int PalEntries[64] = {
		IDC_PAL_00,IDC_PAL_01,IDC_PAL_02,IDC_PAL_03,IDC_PAL_04,IDC_PAL_05,IDC_PAL_06,IDC_PAL_07,IDC_PAL_08,IDC_PAL_09,IDC_PAL_0A,IDC_PAL_0B,IDC_PAL_0C,IDC_PAL_0D,IDC_PAL_0E,IDC_PAL_0F,
		IDC_PAL_10,IDC_PAL_11,IDC_PAL_12,IDC_PAL_13,IDC_PAL_14,IDC_PAL_15,IDC_PAL_16,IDC_PAL_17,IDC_PAL_18,IDC_PAL_19,IDC_PAL_1A,IDC_PAL_1B,IDC_PAL_1C,IDC_PAL_1D,IDC_PAL_1E,IDC_PAL_1F,
		IDC_PAL_20,IDC_PAL_21,IDC_PAL_22,IDC_PAL_23,IDC_PAL_24,IDC_PAL_25,IDC_PAL_26,IDC_PAL_27,IDC_PAL_28,IDC_PAL_29,IDC_PAL_2A,IDC_PAL_2B,IDC_PAL_2C,IDC_PAL_2D,IDC_PAL_2E,IDC_PAL_2F,
		IDC_PAL_30,IDC_PAL_31,IDC_PAL_32,IDC_PAL_33,IDC_PAL_34,IDC_PAL_35,IDC_PAL_36,IDC_PAL_37,IDC_PAL_38,IDC_PAL_39,IDC_PAL_3A,IDC_PAL_3B,IDC_PAL_3C,IDC_PAL_3D,IDC_PAL_3E,IDC_PAL_3F
	};
	static BOOL inUpdate = FALSE;

	int wmId, wmEvent;
	OPENFILENAME ofn;
	PAINTSTRUCT ps;
	HDC hdc;

	static BOOL ispal;
	static int pal, i;

	switch (uMsg)
	{
	case WM_INITDIALOG:
		inUpdate = TRUE;
		ispal = PPU::IsPAL;
		hue = NTSChue;
		nsat = NTSCsat;
		psat = PALsat;
		pal = ispal ? PalettePAL : PaletteNTSC;
		_tcscpy(extfn, ispal ? CustPalettePAL : CustPaletteNTSC);

		if (pal == PALETTE_NTSC)
			GenerateNTSC(hue, nsat);
		else if (pal == PALETTE_PAL)
			GeneratePAL(psat);
		else if (pal == PALETTE_EXT)
		{
			if (!ImportPalette(extfn, TRUE))
			{
				MessageBox(hMainWnd, _T("Unable to load the specified palette! Reverting to default!"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
				if (ispal)
					pal = PALETTE_PAL;
				else	pal = PALETTE_NTSC;
			}
		}
		else	GenerateRGB(pal);

		SendDlgItemMessage(hDlg, IDC_PAL_HUESLIDER, TBM_SETRANGE, FALSE, MAKELONG(-30, 30));
		SendDlgItemMessage(hDlg, IDC_PAL_HUESLIDER, TBM_SETTICFREQ, 5, 0);
		SendDlgItemMessage(hDlg, IDC_PAL_SATSLIDER, TBM_SETRANGE, FALSE, MAKELONG(0, 100));
		SendDlgItemMessage(hDlg, IDC_PAL_SATSLIDER, TBM_SETTICFREQ, 5, 0);
		SetDlgItemText(hDlg, IDC_PAL_EXTFILE, extfn);
		CheckRadioButton(hDlg, paltable[0], paltable[PALETTE_MAX-1], paltable[pal]);
		UpdatePalette(hDlg, pal);
		inUpdate = FALSE;
		return TRUE;
		break;
	case WM_COMMAND:
		if (inUpdate)
			break;
		wmId    = LOWORD(wParam); 
		wmEvent = HIWORD(wParam); 
		switch (wmId)
		{
		case IDC_PAL_NTSC:
			pal = PALETTE_NTSC;
			GenerateNTSC(hue, nsat);
			UpdatePalette(hDlg, pal);
			break;
		case IDC_PAL_PAL:
			pal = PALETTE_PAL;
			GeneratePAL(psat);
			UpdatePalette(hDlg, pal);
			break;
		case IDC_PAL_PC10:
			pal = PALETTE_PC10;
			GenerateRGB(pal);
			UpdatePalette(hDlg, pal);
			break;
		case IDC_PAL_EXTFILE:
			GetDlgItemText(hDlg, IDC_PAL_EXTFILE, extfn, MAX_PATH);
			UpdatePalette(hDlg, pal);
			break;
		case IDC_PAL_EXT:
			if (ImportPalette(extfn, TRUE))
			{
				pal = PALETTE_EXT;
				UpdatePalette(hDlg, pal);
			}
			break;
		case IDC_PAL_VS1:
			pal = PALETTE_VS1;
			GenerateRGB(pal);
			UpdatePalette(hDlg, pal);
			break;
		case IDC_PAL_VS2:
			pal = PALETTE_VS2;
			GenerateRGB(pal);
			UpdatePalette(hDlg, pal);
			break;
		case IDC_PAL_VS3:
			pal = PALETTE_VS3;
			GenerateRGB(pal);
			UpdatePalette(hDlg, pal);
			break;
		case IDC_PAL_VS4:
			pal = PALETTE_VS4;
			GenerateRGB(pal);
			UpdatePalette(hDlg, pal);
			break;
		case IDC_PAL_BROWSE:
			ZeroMemory(&ofn, sizeof(ofn));
			ofn.lStructSize = sizeof(ofn);
			ofn.hwndOwner = hDlg;
			ofn.hInstance = hInst;
			ofn.lpstrFilter = _T("Palette file (*.PAL)\0") _T("*.PAL\0") _T("\0");
			ofn.lpstrCustomFilter = NULL;
			ofn.nFilterIndex = 1;
			ofn.lpstrFile = extfn;
			ofn.nMaxFile = MAX_PATH;
			ofn.lpstrFileTitle = NULL;
			ofn.nMaxFileTitle = 0;
			ofn.lpstrInitialDir = Path_PAL;
			ofn.Flags = OFN_FILEMUSTEXIST;
			ofn.lpstrDefExt = NULL;
			ofn.lCustData = 0;
			ofn.lpfnHook = NULL;
			ofn.lpTemplateName = NULL;
			if (GetOpenFileName(&ofn))
			{
				_tcscpy(Path_PAL, extfn);
				Path_PAL[ofn.nFileOffset-1] = 0;
				if (ImportPalette(extfn, TRUE))
				{
					pal = PALETTE_EXT;
					CheckRadioButton(hDlg, paltable[0], paltable[PALETTE_MAX-1], paltable[pal]);
					SetDlgItemText(hDlg, IDC_PAL_EXTFILE, extfn);
					UpdatePalette(hDlg, pal);
				}
				else	MessageBox(hDlg, _T("Selected file is not a valid palette!"), _T("Nintendulator"), MB_OK | MB_ICONERROR);
			}
			break;
		case IDC_PAL_ER:
		case IDC_PAL_EG:
		case IDC_PAL_EB:
			UpdatePalette(hDlg, pal);
			break;
		case IDOK:
			if (pal == PALETTE_NTSC)
			{
				NTSChue = hue;
				NTSCsat = nsat;
			}
			if (pal == PALETTE_PAL)
				PALsat = psat;
			if (pal == PALETTE_EXT)
				_tcscpy(ispal ? CustPalettePAL : CustPaletteNTSC, extfn);
			if (ispal)
				PalettePAL = pal;
			else	PaletteNTSC = pal;
			LoadPalette(pal);
			EndDialog(hDlg, 0);
			break;
		case IDCANCEL:
			if (ispal)
				pal = PalettePAL;
			else	pal = PaletteNTSC;
			LoadPalette(pal);
			EndDialog(hDlg, 0);
			break;
		};
		break;
	case WM_HSCROLL:
		if (lParam == (LPARAM)GetDlgItem(hDlg, IDC_PAL_HUESLIDER))
		{
			hue = SendDlgItemMessage(hDlg, IDC_PAL_HUESLIDER, TBM_GETPOS, 0, 0);
			SetDlgItemInt(hDlg, IDC_PAL_HUE, hue, TRUE);
			GenerateNTSC(hue, nsat);
			UpdatePalette(hDlg, pal);
		}
		if (lParam == (LPARAM)GetDlgItem(hDlg, IDC_PAL_SATSLIDER))
		{
			if (pal == PALETTE_NTSC)
			{
				nsat = SendDlgItemMessage(hDlg, IDC_PAL_SATSLIDER, TBM_GETPOS, 0, 0);
				SetDlgItemInt(hDlg, IDC_PAL_SAT, nsat, FALSE);
				GenerateNTSC(hue, nsat);
			}
			else if (pal == PALETTE_PAL)
			{
				psat = SendDlgItemMessage(hDlg, IDC_PAL_SATSLIDER, TBM_GETPOS, 0, 0);
				SetDlgItemInt(hDlg, IDC_PAL_SAT, psat, FALSE);
				GeneratePAL(psat);
			}
			UpdatePalette(hDlg, pal);
		}
		break;
	case WM_PAINT:
		hdc = BeginPaint(hDlg, &ps);
		{
			HDC compdc = CreateCompatibleDC(hdc);
			HBITMAP bmp;
			POINT wcl = {0, 0};
			RECT wrect, rect;
			ClientToScreen(hDlg, &wcl);
			GetWindowRect(GetDlgItem(hDlg, PalEntries[0]), &rect);
			wrect.top = rect.top - wcl.y;
			wrect.left = rect.left - wcl.x;
			GetWindowRect(GetDlgItem(hDlg, PalEntries[63]), &rect);
			wrect.bottom = rect.bottom - wcl.y;
			wrect.right = rect.right - wcl.x;
			bmp = CreateCompatibleBitmap(hdc, wrect.right - wrect.left, wrect.bottom - wrect.top);
			SelectObject(compdc, bmp);
			for (i = 0; i < 64; i++)
			{
				HWND dlgitem = GetDlgItem(hDlg, PalEntries[i]);
				HBRUSH brush;
				unsigned char emp =
					((IsDlgButtonChecked(hDlg, IDC_PAL_ER) == BST_CHECKED) ? 0x1 : 0x0) |
					((IsDlgButtonChecked(hDlg, IDC_PAL_EG) == BST_CHECKED) ? 0x2 : 0x0) |
					((IsDlgButtonChecked(hDlg, IDC_PAL_EB) == BST_CHECKED) ? 0x4 : 0x0);
				unsigned int R = RawPalette[emp][i][0], G = RawPalette[emp][i][1], B = RawPalette[emp][i][2];
				brush = CreateSolidBrush(RGB(R, G, B));
				GetWindowRect(dlgitem, &rect);
				rect.top -= wcl.y + wrect.top;
				rect.bottom -= wcl.y + wrect.top;
				rect.left -= wcl.x + wrect.left;
				rect.right -= wcl.x + wrect.left;
				FillRect(compdc, &rect, brush);
				DeleteObject(brush);
			}
			BitBlt(hdc, wrect.left, wrect.top, wrect.right - wrect.left, wrect.bottom - wrect.top, compdc, 0, 0, SRCCOPY);
			DeleteDC(compdc);
			DeleteObject(bmp);
		}
		EndPaint(hDlg, &ps);
		break;
	}

	return FALSE;
}
void	PaletteConfig (void)
{
	DialogBox(hInst, (LPCTSTR)IDD_PALETTE, hMainWnd, PaletteConfigProc);
}
} // namespace GFX